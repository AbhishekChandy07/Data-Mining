{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dpoPi5UdfhW3"
   },
   "source": [
    "IRIS DATASET\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "id": "ESiNrWuTdSnF"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.tree import plot_tree\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qa2LNo-EfgkJ",
    "outputId": "0b0ece48-90eb-4b48-d57c-5862dc376224"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(150, 4)\n",
      "(150,)\n"
     ]
    }
   ],
   "source": [
    "iris = load_iris()\n",
    "x=iris.data\n",
    "y=iris.target\n",
    "print(x.shape)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "id": "rIBbITCi1vZg"
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "aFshA4Rvf4xl"
   },
   "source": [
    "(i) Hold Out Method, Test size = 25%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "CIywBVFkgtEA",
    "outputId": "fc7ff638-a67c-41ab-a8ea-4c565e792cb4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X_train:  (112, 4)\n",
      "Shape of X_test:  (38, 4)\n",
      "Shape of y_train:  (112,)\n",
      "Shape of y_test:  (38,)\n"
     ]
    }
   ],
   "source": [
    "k_size = 0.25\n",
    "r_seeds = 100\n",
    "X_train, X_test, y_train, y_test = train_test_split(x,y,test_size = k_size, random_state=r_seeds)\n",
    "print(\"Shape of X_train: \", X_train.shape)\n",
    "print(\"Shape of X_test: \", X_test.shape)\n",
    "print(\"Shape of y_train: \", y_train.shape)\n",
    "print(\"Shape of y_test: \", y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "weJrpXNkiDBm"
   },
   "source": [
    "Decision Tree Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "id": "rtWUy0cGg36O"
   },
   "outputs": [],
   "source": [
    "deci_tree = DecisionTreeClassifier(criterion='entropy')\n",
    "deci_tree.fit(X_train, y_train)\n",
    "prediction = deci_tree.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 564
    },
    "id": "Bogk4FeAiCuQ",
    "outputId": "0a4c0b59-4405-4116-8352-a111745b6da2"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, prediction)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)\n",
    "plt.xlabel('Predicted labels')\n",
    "plt.ylabel('True labels')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "EXBTH-SCyZWC",
    "outputId": "321ceeef-8a5a-431d-cec3-0502842671b1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on Hold Out method using classification: 94.73684210526315 %\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        14\n",
      "           1       0.90      0.90      0.90        10\n",
      "           2       0.93      0.93      0.93        14\n",
      "\n",
      "    accuracy                           0.95        38\n",
      "   macro avg       0.94      0.94      0.94        38\n",
      "weighted avg       0.95      0.95      0.95        38\n",
      "\n"
     ]
    }
   ],
   "source": [
    "accuracy_dt1 = accuracy_score(y_test, prediction)\n",
    "print(\"Accuracy on Hold Out method using classification:\", accuracy_dt1*100,\"%\")\n",
    "\n",
    "report = classification_report(y_test, prediction)\n",
    "print(\"Classification Report:\\n\", report)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0i8yH20U0BYO"
   },
   "source": [
    "KNearest Neighbour Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "id": "pOAwONKezW7I"
   },
   "outputs": [],
   "source": [
    "knn = KNeighborsClassifier()\n",
    "knn.fit(X_train, y_train)\n",
    "prediction2 = knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oXskjqkE0gEw",
    "outputId": "fdc6c2f7-0608-41f2-88be-816165d5d231"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on Hold Out method using classification: 97.36842105263158 %\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        14\n",
      "           1       0.91      1.00      0.95        10\n",
      "           2       1.00      0.93      0.96        14\n",
      "\n",
      "    accuracy                           0.97        38\n",
      "   macro avg       0.97      0.98      0.97        38\n",
      "weighted avg       0.98      0.97      0.97        38\n",
      "\n"
     ]
    }
   ],
   "source": [
    "accuracy_knn1 = accuracy_score(y_test, prediction2)\n",
    "print(\"Accuracy on Hold Out method using classification:\", accuracy_knn1*100,\"%\")\n",
    "\n",
    "report = classification_report(y_test, prediction2)\n",
    "print(\"Classification Report:\\n\", report)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rxBUcqro0rAf"
   },
   "source": [
    "Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 75
    },
    "id": "afSOzuEn0qU1",
    "outputId": "30f85015-fa47-4733-b471-4db7e79eb277"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb = GaussianNB()\n",
    "nb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "id": "uzBRSdp70-4Q"
   },
   "outputs": [],
   "source": [
    "prediction3 = nb.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kMn-Aa8J1P2n",
    "outputId": "2e798f8e-538c-49f8-ded7-8663354fc6f6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on Hold Out method using classification: 94.73684210526315 %\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        14\n",
      "           1       0.90      0.90      0.90        10\n",
      "           2       0.93      0.93      0.93        14\n",
      "\n",
      "    accuracy                           0.95        38\n",
      "   macro avg       0.94      0.94      0.94        38\n",
      "weighted avg       0.95      0.95      0.95        38\n",
      "\n"
     ]
    }
   ],
   "source": [
    "accuracy_nb1 = accuracy_score(y_test, prediction3)\n",
    "print(\"Accuracy on Hold Out method using classification:\", accuracy_nb1*100,\"%\")\n",
    "\n",
    "report = classification_report(y_test, prediction3)\n",
    "print(\"Classification Report:\\n\", report)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NZHXXIMp2JJY"
   },
   "source": [
    "(ii) Random Subsampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PKCuOMqHk93D",
    "outputId": "fc720561-660a-4b4f-a860-afc420c6f358"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Accuracy on Random Subsampling method using Decision Tree classification: 95.0 %\n",
      "Average Accuracy on Random Subsampling method using KNearest Neighbor classification: 96.3157894736842 %\n",
      "Average Accuracy on Random Subsampling method using Naive Bayes classification: 94.73684210526316 %\n",
      "\n",
      "\n",
      "Classification Report for Decision Tree:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        13\n",
      "           1       1.00      0.94      0.97        16\n",
      "           2       0.90      1.00      0.95         9\n",
      "\n",
      "    accuracy                           0.97        38\n",
      "   macro avg       0.97      0.98      0.97        38\n",
      "weighted avg       0.98      0.97      0.97        38\n",
      "\n",
      "\n",
      "Classification Report for KNearest Neighbor:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        13\n",
      "           1       1.00      0.94      0.97        16\n",
      "           2       0.90      1.00      0.95         9\n",
      "\n",
      "    accuracy                           0.97        38\n",
      "   macro avg       0.97      0.98      0.97        38\n",
      "weighted avg       0.98      0.97      0.97        38\n",
      "\n",
      "\n",
      "Classification Report for Naive Bayes:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        13\n",
      "           1       1.00      1.00      1.00        16\n",
      "           2       1.00      1.00      1.00         9\n",
      "\n",
      "    accuracy                           1.00        38\n",
      "   macro avg       1.00      1.00      1.00        38\n",
      "weighted avg       1.00      1.00      1.00        38\n",
      "\n"
     ]
    }
   ],
   "source": [
    "iris = load_iris()\n",
    "x = iris.data\n",
    "y = iris.target\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(x)\n",
    "\n",
    "# Number of iterations for random subsampling\n",
    "iterations = 10\n",
    "test_size = 0.25\n",
    "\n",
    "dt_accuracies = []\n",
    "dt_reports = []\n",
    "knn_accuracies = []\n",
    "knn_reports = []\n",
    "nb_accuracies = []\n",
    "nb_reports = []\n",
    "\n",
    "for i in range(iterations):\n",
    "\n",
    "    # Splitting the dataset\n",
    "    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=i)\n",
    "\n",
    "    # Decision Tree Classification\n",
    "    deci_tree = DecisionTreeClassifier(criterion='entropy')\n",
    "    deci_tree.fit(X_train, y_train)\n",
    "    prediction_dt = deci_tree.predict(X_test)\n",
    "    accuracy_dt = accuracy_score(y_test, prediction_dt)\n",
    "    dt_accuracies.append(accuracy_dt)\n",
    "    report_dt = classification_report(y_test, prediction_dt)\n",
    "    dt_reports.append(report_dt)\n",
    "\n",
    "    # KNearest Neighbour Classification\n",
    "    knn = KNeighborsClassifier()\n",
    "    knn.fit(X_train, y_train)\n",
    "    prediction_knn = knn.predict(X_test)\n",
    "    accuracy_knn = accuracy_score(y_test, prediction_knn)\n",
    "    knn_accuracies.append(accuracy_knn)\n",
    "    report_knn = classification_report(y_test, prediction_knn)\n",
    "    knn_reports.append(report_knn)\n",
    "\n",
    "    # Naive Bayes\n",
    "    nb = GaussianNB()\n",
    "    nb.fit(X_train, y_train)\n",
    "    prediction_nb = nb.predict(X_test)\n",
    "    accuracy_nb = accuracy_score(y_test, prediction_nb)\n",
    "    nb_accuracies.append(accuracy_nb)\n",
    "    report_nb = classification_report(y_test, prediction_nb)\n",
    "    nb_reports.append(report_nb)\n",
    "\n",
    "# Average accuracies\n",
    "accuracy_dt2 = np.mean(dt_accuracies)\n",
    "accuracy_knn2 = np.mean(knn_accuracies)\n",
    "accuracy_nb2 = np.mean(nb_accuracies)\n",
    "\n",
    "print(\"Average Accuracy on Random Subsampling method using Decision Tree classification:\", accuracy_dt2 * 100, \"%\")\n",
    "print(\"Average Accuracy on Random Subsampling method using KNearest Neighbor classification:\", accuracy_knn2 * 100, \"%\")\n",
    "print(\"Average Accuracy on Random Subsampling method using Naive Bayes classification:\", accuracy_nb2 * 100, \"%\")\n",
    "\n",
    "# Print classification reports\n",
    "print(\"\\n\\nClassification Report for Decision Tree:\")\n",
    "print(dt_reports[0])\n",
    "print(\"\\nClassification Report for KNearest Neighbor:\")\n",
    "print(knn_reports[0])\n",
    "print(\"\\nClassification Report for Naive Bayes:\")\n",
    "print(nb_reports[0])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dMAW6bZZmYJm"
   },
   "source": [
    "(iii) Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "flt_tGgymXnj",
    "outputId": "859bd04a-3617-40fe-c276-06279dc454cd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for Decision Tree:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        50\n",
      "           1       0.92      0.94      0.93        50\n",
      "           2       0.94      0.92      0.93        50\n",
      "\n",
      "    accuracy                           0.95       150\n",
      "   macro avg       0.95      0.95      0.95       150\n",
      "weighted avg       0.95      0.95      0.95       150\n",
      "\n",
      "Average Accuracy for Decision Tree: 96.0\n",
      "\n",
      "Classification Report for KNearest Neighbor:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        50\n",
      "           1       0.94      0.92      0.93        50\n",
      "           2       0.92      0.94      0.93        50\n",
      "\n",
      "    accuracy                           0.95       150\n",
      "   macro avg       0.95      0.95      0.95       150\n",
      "weighted avg       0.95      0.95      0.95       150\n",
      "\n",
      "Average Accuracy for KNearest Neighbor: 95.33333333333334\n",
      "\n",
      "Classification Report for Naive Bayes:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        50\n",
      "           1       0.92      0.94      0.93        50\n",
      "           2       0.94      0.92      0.93        50\n",
      "\n",
      "    accuracy                           0.95       150\n",
      "   macro avg       0.95      0.95      0.95       150\n",
      "weighted avg       0.95      0.95      0.95       150\n",
      "\n",
      "Average Accuracy for Naive Bayes: 95.33333333333334\n"
     ]
    }
   ],
   "source": [
    "# Decision Tree Classifier\n",
    "deci_tree = DecisionTreeClassifier(criterion='entropy')\n",
    "dt_scores = cross_val_score(deci_tree, X_scaled, y, cv=10)\n",
    "accuracy_dt3 = np.mean(dt_scores)\n",
    "dt_predictions = cross_val_predict(deci_tree, X_scaled, y, cv=10)\n",
    "dt_report = classification_report(y, dt_predictions)\n",
    "print(\"Classification Report for Decision Tree:\")\n",
    "print(dt_report)\n",
    "print(\"Average Accuracy for Decision Tree:\", accuracy_dt3 * 100)\n",
    "\n",
    "# KNearest Neighbors Classifier\n",
    "knn = KNeighborsClassifier()\n",
    "knn_scores = cross_val_score(knn, X_scaled, y, cv=10)\n",
    "accuracy_knn3 = np.mean(knn_scores)\n",
    "knn_predictions = cross_val_predict(knn, X_scaled, y, cv=10)\n",
    "knn_report = classification_report(y, knn_predictions)\n",
    "print(\"\\nClassification Report for KNearest Neighbor:\")\n",
    "print(knn_report)\n",
    "print(\"Average Accuracy for KNearest Neighbor:\", accuracy_knn3 * 100)\n",
    "\n",
    "# Naive Bayes Classifier\n",
    "nb = GaussianNB()\n",
    "nb_scores = cross_val_score(nb, X_scaled, y, cv=10)\n",
    "accuracy_nb3 = np.mean(nb_scores)\n",
    "nb_predictions = cross_val_predict(nb, X_scaled, y, cv=10)\n",
    "nb_report = classification_report(y, nb_predictions)\n",
    "print(\"\\nClassification Report for Naive Bayes:\")\n",
    "print(nb_report)\n",
    "print(\"Average Accuracy for Naive Bayes:\", accuracy_nb3 * 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OMCK78zQydLz",
    "outputId": "05dd0519-da5f-4cca-c3a7-fd03507e7dfd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Accuracy Table:\n",
      "                    Decision Tree  KNearest Neighbor  Naive Bayes\n",
      "Hold Out                 0.947368           0.973684     0.947368\n",
      "Random Subsampling       0.950000           0.963158     0.947368\n",
      "Cross Validation         0.960000           0.953333     0.953333\n"
     ]
    }
   ],
   "source": [
    "hold_out_accuracies = [accuracy_dt1, accuracy_knn1, accuracy_nb1]\n",
    "random_subsampling_accuracies = [accuracy_dt2, accuracy_knn2, accuracy_nb2]\n",
    "cross_val_accuracies = [accuracy_dt3, accuracy_knn3, accuracy_nb3]\n",
    "\n",
    "accuracies = [hold_out_accuracies, random_subsampling_accuracies, cross_val_accuracies]\n",
    "\n",
    "accuracy_table = pd.DataFrame(accuracies, columns=['Decision Tree', 'KNearest Neighbor', 'Naive Bayes'], index=['Hold Out', 'Random Subsampling', 'Cross Validation'])\n",
    "\n",
    "print(\"\\nAccuracy Table:\")\n",
    "print(accuracy_table)\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
