{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "d68a41ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: efficient-apriori in /Users/ayushjha/anaconda3/lib/python3.11/site-packages (2.0.3)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install efficient-apriori"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "0921da28",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from efficient_apriori import apriori\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "8183446d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item(s)</th>\n",
       "      <th>Item 1</th>\n",
       "      <th>Item 2</th>\n",
       "      <th>Item 3</th>\n",
       "      <th>Item 4</th>\n",
       "      <th>Item 5</th>\n",
       "      <th>Item 6</th>\n",
       "      <th>Item 7</th>\n",
       "      <th>Item 8</th>\n",
       "      <th>Item 9</th>\n",
       "      <th>...</th>\n",
       "      <th>Item 23</th>\n",
       "      <th>Item 24</th>\n",
       "      <th>Item 25</th>\n",
       "      <th>Item 26</th>\n",
       "      <th>Item 27</th>\n",
       "      <th>Item 28</th>\n",
       "      <th>Item 29</th>\n",
       "      <th>Item 30</th>\n",
       "      <th>Item 31</th>\n",
       "      <th>Item 32</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>citrus fruit</td>\n",
       "      <td>semi-finished bread</td>\n",
       "      <td>margarine</td>\n",
       "      <td>ready soups</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>tropical fruit</td>\n",
       "      <td>yogurt</td>\n",
       "      <td>coffee</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>whole milk</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>pip fruit</td>\n",
       "      <td>yogurt</td>\n",
       "      <td>cream cheese</td>\n",
       "      <td>meat spreads</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>other vegetables</td>\n",
       "      <td>whole milk</td>\n",
       "      <td>condensed milk</td>\n",
       "      <td>long life bakery product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9830</th>\n",
       "      <td>17</td>\n",
       "      <td>sausage</td>\n",
       "      <td>chicken</td>\n",
       "      <td>beef</td>\n",
       "      <td>hamburger meat</td>\n",
       "      <td>citrus fruit</td>\n",
       "      <td>grapes</td>\n",
       "      <td>root vegetables</td>\n",
       "      <td>whole milk</td>\n",
       "      <td>butter</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9831</th>\n",
       "      <td>1</td>\n",
       "      <td>cooking chocolate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9832</th>\n",
       "      <td>10</td>\n",
       "      <td>chicken</td>\n",
       "      <td>citrus fruit</td>\n",
       "      <td>other vegetables</td>\n",
       "      <td>butter</td>\n",
       "      <td>yogurt</td>\n",
       "      <td>frozen dessert</td>\n",
       "      <td>domestic eggs</td>\n",
       "      <td>rolls/buns</td>\n",
       "      <td>rum</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9833</th>\n",
       "      <td>4</td>\n",
       "      <td>semi-finished bread</td>\n",
       "      <td>bottled water</td>\n",
       "      <td>soda</td>\n",
       "      <td>bottled beer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9834</th>\n",
       "      <td>5</td>\n",
       "      <td>chicken</td>\n",
       "      <td>tropical fruit</td>\n",
       "      <td>other vegetables</td>\n",
       "      <td>vinegar</td>\n",
       "      <td>shopping bags</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9835 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Item(s)               Item 1               Item 2            Item 3  \\\n",
       "0           4         citrus fruit  semi-finished bread         margarine   \n",
       "1           3       tropical fruit               yogurt            coffee   \n",
       "2           1           whole milk                  NaN               NaN   \n",
       "3           4            pip fruit               yogurt      cream cheese   \n",
       "4           4     other vegetables           whole milk    condensed milk   \n",
       "...       ...                  ...                  ...               ...   \n",
       "9830       17              sausage              chicken              beef   \n",
       "9831        1    cooking chocolate                  NaN               NaN   \n",
       "9832       10              chicken         citrus fruit  other vegetables   \n",
       "9833        4  semi-finished bread        bottled water              soda   \n",
       "9834        5              chicken       tropical fruit  other vegetables   \n",
       "\n",
       "                        Item 4         Item 5          Item 6  \\\n",
       "0                  ready soups            NaN             NaN   \n",
       "1                          NaN            NaN             NaN   \n",
       "2                          NaN            NaN             NaN   \n",
       "3                 meat spreads            NaN             NaN   \n",
       "4     long life bakery product            NaN             NaN   \n",
       "...                        ...            ...             ...   \n",
       "9830            hamburger meat   citrus fruit          grapes   \n",
       "9831                       NaN            NaN             NaN   \n",
       "9832                    butter         yogurt  frozen dessert   \n",
       "9833              bottled beer            NaN             NaN   \n",
       "9834                   vinegar  shopping bags             NaN   \n",
       "\n",
       "               Item 7      Item 8  Item 9  ... Item 23 Item 24 Item 25  \\\n",
       "0                 NaN         NaN     NaN  ...     NaN     NaN     NaN   \n",
       "1                 NaN         NaN     NaN  ...     NaN     NaN     NaN   \n",
       "2                 NaN         NaN     NaN  ...     NaN     NaN     NaN   \n",
       "3                 NaN         NaN     NaN  ...     NaN     NaN     NaN   \n",
       "4                 NaN         NaN     NaN  ...     NaN     NaN     NaN   \n",
       "...               ...         ...     ...  ...     ...     ...     ...   \n",
       "9830  root vegetables  whole milk  butter  ...     NaN     NaN     NaN   \n",
       "9831              NaN         NaN     NaN  ...     NaN     NaN     NaN   \n",
       "9832    domestic eggs  rolls/buns     rum  ...     NaN     NaN     NaN   \n",
       "9833              NaN         NaN     NaN  ...     NaN     NaN     NaN   \n",
       "9834              NaN         NaN     NaN  ...     NaN     NaN     NaN   \n",
       "\n",
       "     Item 26 Item 27 Item 28 Item 29 Item 30 Item 31 Item 32  \n",
       "0        NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "1        NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "2        NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "3        NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "4        NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "...      ...     ...     ...     ...     ...     ...     ...  \n",
       "9830     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "9831     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "9832     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "9833     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "9834     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "\n",
       "[9835 rows x 33 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"groceriesDataset.csv\");\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "1f5d2505",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Item(s)', 'Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5', 'Item 6',\n",
       "       'Item 7', 'Item 8', 'Item 9', 'Item 10', 'Item 11', 'Item 12',\n",
       "       'Item 13', 'Item 14', 'Item 15', 'Item 16', 'Item 17', 'Item 18',\n",
       "       'Item 19', 'Item 20', 'Item 21', 'Item 22', 'Item 23', 'Item 24',\n",
       "       'Item 25', 'Item 26', 'Item 27', 'Item 28', 'Item 29', 'Item 30',\n",
       "       'Item 31', 'Item 32'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "36679429",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item 1</th>\n",
       "      <th>Item 2</th>\n",
       "      <th>Item 3</th>\n",
       "      <th>Item 4</th>\n",
       "      <th>Item 5</th>\n",
       "      <th>Item 6</th>\n",
       "      <th>Item 7</th>\n",
       "      <th>Item 8</th>\n",
       "      <th>Item 9</th>\n",
       "      <th>Item 10</th>\n",
       "      <th>...</th>\n",
       "      <th>Item 23</th>\n",
       "      <th>Item 24</th>\n",
       "      <th>Item 25</th>\n",
       "      <th>Item 26</th>\n",
       "      <th>Item 27</th>\n",
       "      <th>Item 28</th>\n",
       "      <th>Item 29</th>\n",
       "      <th>Item 30</th>\n",
       "      <th>Item 31</th>\n",
       "      <th>Item 32</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>citrus fruit</td>\n",
       "      <td>semi-finished bread</td>\n",
       "      <td>margarine</td>\n",
       "      <td>ready soups</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tropical fruit</td>\n",
       "      <td>yogurt</td>\n",
       "      <td>coffee</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>whole milk</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pip fruit</td>\n",
       "      <td>yogurt</td>\n",
       "      <td>cream cheese</td>\n",
       "      <td>meat spreads</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>other vegetables</td>\n",
       "      <td>whole milk</td>\n",
       "      <td>condensed milk</td>\n",
       "      <td>long life bakery product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9830</th>\n",
       "      <td>sausage</td>\n",
       "      <td>chicken</td>\n",
       "      <td>beef</td>\n",
       "      <td>hamburger meat</td>\n",
       "      <td>citrus fruit</td>\n",
       "      <td>grapes</td>\n",
       "      <td>root vegetables</td>\n",
       "      <td>whole milk</td>\n",
       "      <td>butter</td>\n",
       "      <td>whipped/sour cream</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9831</th>\n",
       "      <td>cooking chocolate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9832</th>\n",
       "      <td>chicken</td>\n",
       "      <td>citrus fruit</td>\n",
       "      <td>other vegetables</td>\n",
       "      <td>butter</td>\n",
       "      <td>yogurt</td>\n",
       "      <td>frozen dessert</td>\n",
       "      <td>domestic eggs</td>\n",
       "      <td>rolls/buns</td>\n",
       "      <td>rum</td>\n",
       "      <td>cling film/bags</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9833</th>\n",
       "      <td>semi-finished bread</td>\n",
       "      <td>bottled water</td>\n",
       "      <td>soda</td>\n",
       "      <td>bottled beer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9834</th>\n",
       "      <td>chicken</td>\n",
       "      <td>tropical fruit</td>\n",
       "      <td>other vegetables</td>\n",
       "      <td>vinegar</td>\n",
       "      <td>shopping bags</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9835 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Item 1               Item 2            Item 3  \\\n",
       "0            citrus fruit  semi-finished bread         margarine   \n",
       "1          tropical fruit               yogurt            coffee   \n",
       "2              whole milk                  NaN               NaN   \n",
       "3               pip fruit               yogurt      cream cheese   \n",
       "4        other vegetables           whole milk    condensed milk   \n",
       "...                   ...                  ...               ...   \n",
       "9830              sausage              chicken              beef   \n",
       "9831    cooking chocolate                  NaN               NaN   \n",
       "9832              chicken         citrus fruit  other vegetables   \n",
       "9833  semi-finished bread        bottled water              soda   \n",
       "9834              chicken       tropical fruit  other vegetables   \n",
       "\n",
       "                        Item 4         Item 5          Item 6  \\\n",
       "0                  ready soups            NaN             NaN   \n",
       "1                          NaN            NaN             NaN   \n",
       "2                          NaN            NaN             NaN   \n",
       "3                 meat spreads            NaN             NaN   \n",
       "4     long life bakery product            NaN             NaN   \n",
       "...                        ...            ...             ...   \n",
       "9830            hamburger meat   citrus fruit          grapes   \n",
       "9831                       NaN            NaN             NaN   \n",
       "9832                    butter         yogurt  frozen dessert   \n",
       "9833              bottled beer            NaN             NaN   \n",
       "9834                   vinegar  shopping bags             NaN   \n",
       "\n",
       "               Item 7      Item 8  Item 9             Item 10  ... Item 23  \\\n",
       "0                 NaN         NaN     NaN                 NaN  ...     NaN   \n",
       "1                 NaN         NaN     NaN                 NaN  ...     NaN   \n",
       "2                 NaN         NaN     NaN                 NaN  ...     NaN   \n",
       "3                 NaN         NaN     NaN                 NaN  ...     NaN   \n",
       "4                 NaN         NaN     NaN                 NaN  ...     NaN   \n",
       "...               ...         ...     ...                 ...  ...     ...   \n",
       "9830  root vegetables  whole milk  butter  whipped/sour cream  ...     NaN   \n",
       "9831              NaN         NaN     NaN                 NaN  ...     NaN   \n",
       "9832    domestic eggs  rolls/buns     rum     cling film/bags  ...     NaN   \n",
       "9833              NaN         NaN     NaN                 NaN  ...     NaN   \n",
       "9834              NaN         NaN     NaN                 NaN  ...     NaN   \n",
       "\n",
       "     Item 24 Item 25 Item 26 Item 27 Item 28 Item 29 Item 30 Item 31 Item 32  \n",
       "0        NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "1        NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "2        NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "3        NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "4        NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "...      ...     ...     ...     ...     ...     ...     ...     ...     ...  \n",
       "9830     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "9831     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "9832     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "9833     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "9834     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "\n",
       "[9835 rows x 32 columns]"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.drop(\"Item(s)\",axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10a3dde8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "5456f94a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['citrus fruit', 'semi-finished bread', 'margarine', 'ready soups'],\n",
       " ['tropical fruit', 'yogurt', 'coffee'],\n",
       " ['whole milk'],\n",
       " ['pip fruit', 'yogurt', 'cream cheese', 'meat spreads'],\n",
       " ['other vegetables',\n",
       "  'whole milk',\n",
       "  'condensed milk',\n",
       "  'long life bakery product']]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f=lambda record: [x for x in record if x is not np.nan]\n",
    "transactions=list(map(f,df.values))\n",
    "transactions[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75694248",
   "metadata": {},
   "source": [
    "### Find itemsets and rules with min_support=0.5 and min_confidence=0.75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "04c49b5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: {('whole milk',): 2513}}\n",
      "\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "itemsets,rules = apriori(transactions,min_support=0.25, min_confidence=0.25)\n",
    "print(itemsets)\n",
    "print()\n",
    "print(rules)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c3a3cf0",
   "metadata": {},
   "source": [
    "### Find itemsets and rules with min_support=0.05 and min_confidence=0.26"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "49707b9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: {('citrus fruit',): 814, ('margarine',): 576, ('tropical fruit',): 1032, ('yogurt',): 1372, ('coffee',): 571, ('whole milk',): 2513, ('pip fruit',): 744, ('other vegetables',): 1903, ('butter',): 545, ('rolls/buns',): 1809, ('bottled beer',): 792, ('bottled water',): 1087, ('curd',): 524, ('beef',): 516, ('frankfurter',): 580, ('soda',): 1715, ('fruit/vegetable juice',): 711, ('newspapers',): 785, ('pastry',): 875, ('root vegetables',): 1072, ('canned beer',): 764, ('sausage',): 924, ('brown bread',): 638, ('shopping bags',): 969, ('napkins',): 515, ('pork',): 567, ('whipped/sour cream',): 705, ('domestic eggs',): 624}, 2: {('other vegetables', 'whole milk'): 736, ('rolls/buns', 'whole milk'): 557, ('whole milk', 'yogurt'): 551}}\n",
      "\n",
      "[{whole milk} -> {other vegetables}, {other vegetables} -> {whole milk}, {rolls/buns} -> {whole milk}, {yogurt} -> {whole milk}]\n"
     ]
    }
   ],
   "source": [
    "itemsets,rules = apriori(transactions,min_support=0.05, min_confidence=0.26)\n",
    "print(itemsets)\n",
    "print()\n",
    "print(rules)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "acd67354",
   "metadata": {},
   "outputs": [],
   "source": [
    "#extract frequent itemsets and their support values\n",
    "frequent_itemsets=[]\n",
    "for size,itemset in itemsets.items():\n",
    "    for items,support in itemset.items():\n",
    "        frequent_itemsets.append((items,support))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "fa5b83da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(('citrus fruit',), 814),\n",
       " (('margarine',), 576),\n",
       " (('tropical fruit',), 1032),\n",
       " (('yogurt',), 1372),\n",
       " (('coffee',), 571),\n",
       " (('whole milk',), 2513),\n",
       " (('pip fruit',), 744),\n",
       " (('other vegetables',), 1903),\n",
       " (('butter',), 545),\n",
       " (('rolls/buns',), 1809),\n",
       " (('bottled beer',), 792),\n",
       " (('bottled water',), 1087),\n",
       " (('curd',), 524),\n",
       " (('beef',), 516),\n",
       " (('frankfurter',), 580),\n",
       " (('soda',), 1715),\n",
       " (('fruit/vegetable juice',), 711),\n",
       " (('newspapers',), 785),\n",
       " (('pastry',), 875),\n",
       " (('root vegetables',), 1072),\n",
       " (('canned beer',), 764),\n",
       " (('sausage',), 924),\n",
       " (('brown bread',), 638),\n",
       " (('shopping bags',), 969),\n",
       " (('napkins',), 515),\n",
       " (('pork',), 567),\n",
       " (('whipped/sour cream',), 705),\n",
       " (('domestic eggs',), 624),\n",
       " (('other vegetables', 'whole milk'), 736),\n",
       " (('rolls/buns', 'whole milk'), 557),\n",
       " (('whole milk', 'yogurt'), 551)]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frequent_itemsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "d36f3783",
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_itemsets=sorted(frequent_itemsets,key=lambda x: x[1],reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "a78c6e11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Items: whole milk - support: 2513\n",
      "Items: other vegetables - support: 1903\n",
      "Items: rolls/buns - support: 1809\n",
      "Items: soda - support: 1715\n",
      "Items: yogurt - support: 1372\n",
      "Items: bottled water - support: 1087\n",
      "Items: root vegetables - support: 1072\n",
      "Items: tropical fruit - support: 1032\n",
      "Items: shopping bags - support: 969\n",
      "Items: sausage - support: 924\n",
      "Items: pastry - support: 875\n",
      "Items: citrus fruit - support: 814\n",
      "Items: bottled beer - support: 792\n",
      "Items: newspapers - support: 785\n",
      "Items: canned beer - support: 764\n",
      "Items: pip fruit - support: 744\n",
      "Items: other vegetables,whole milk - support: 736\n",
      "Items: fruit/vegetable juice - support: 711\n",
      "Items: whipped/sour cream - support: 705\n",
      "Items: brown bread - support: 638\n",
      "Items: domestic eggs - support: 624\n",
      "Items: frankfurter - support: 580\n",
      "Items: margarine - support: 576\n",
      "Items: coffee - support: 571\n",
      "Items: pork - support: 567\n",
      "Items: rolls/buns,whole milk - support: 557\n",
      "Items: whole milk,yogurt - support: 551\n",
      "Items: butter - support: 545\n",
      "Items: curd - support: 524\n",
      "Items: beef - support: 516\n",
      "Items: napkins - support: 515\n"
     ]
    }
   ],
   "source": [
    "#print sorted frequent itemsets\n",
    "for items,support in sorted_itemsets:\n",
    "    print(f\"Items: {','.join(items)} - support: {support}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "ed4c8616",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(('whole milk',), 2513),\n",
       " (('other vegetables',), 1903),\n",
       " (('rolls/buns',), 1809),\n",
       " (('soda',), 1715),\n",
       " (('yogurt',), 1372)]"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_5_sorted_itemsets=sorted_itemsets[:5]\n",
    "top_5_sorted_itemsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "139b5457",
   "metadata": {},
   "outputs": [],
   "source": [
    "item_names=[', '.join(items) for items,i in top_5_sorted_itemsets]\n",
    "support_values=[support for i,support in top_5_sorted_itemsets]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "38481259",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "plt.bar(item_names,support_values,color='g')\n",
    "plt.xlabel(\"Itemsets\")\n",
    "plt.ylabel(\"Support\")\n",
    "plt.title(\"TOP 5 sorted frequent items\")\n",
    "plt.xticks(rotation=45,ha='right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6120c670",
   "metadata": {},
   "source": [
    "### for another dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "654df58a",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = pd.read_csv('1000i.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "6aee4b8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df.columns = [\"Receipt\", \"Food\", \"Quantity\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "72928dfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Receipt</th>\n",
       "      <th>Food</th>\n",
       "      <th>Quantity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Receipt  Food  Quantity\n",
       "0        1     4        15\n",
       "1        1     2        49\n",
       "2        1     5        44\n",
       "3        2     1         1\n",
       "4        2     2        19"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "1eea5fc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Receipt     0\n",
       "Food        0\n",
       "Quantity    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "76c6de69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3537, 3)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "0b2cc403",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Receipt</th>\n",
       "      <th>Food</th>\n",
       "      <th>Quantity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3537.000000</td>\n",
       "      <td>3537.000000</td>\n",
       "      <td>3537.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>498.145321</td>\n",
       "      <td>2.986146</td>\n",
       "      <td>24.223353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>289.283458</td>\n",
       "      <td>1.403204</td>\n",
       "      <td>14.722389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>244.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>496.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>24.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>754.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>37.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1000.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>49.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Receipt         Food     Quantity\n",
       "count  3537.000000  3537.000000  3537.000000\n",
       "mean    498.145321     2.986146    24.223353\n",
       "std     289.283458     1.403204    14.722389\n",
       "min       1.000000     1.000000     0.000000\n",
       "25%     244.000000     2.000000    12.000000\n",
       "50%     496.000000     3.000000    24.000000\n",
       "75%     754.000000     4.000000    37.000000\n",
       "max    1000.000000     5.000000    49.000000"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "320376ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df['Food'] = new_df[\"Food\"].map({1:\"milk\", 2:\"sugar\", 3:\"chocolate\", 4:\"apples\", 5:\"curd\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "e1cfee34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Receipt</th>\n",
       "      <th>Food</th>\n",
       "      <th>Quantity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>apples</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>sugar</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Receipt    Food  Quantity\n",
       "0        1  apples        15\n",
       "1        1   sugar        49"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "8e44bff3",
   "metadata": {},
   "outputs": [],
   "source": [
    "li = []\n",
    "\n",
    "for i in new_df[\"Receipt\"].unique():\n",
    "    li.append([])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "f439e5f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(new_df.shape[0]):\n",
    "    li[new_df[\"Receipt\"][i] - 1].append(new_df[\"Food\"][i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "b35e8849",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['apples', 'sugar', 'curd'],\n",
       " ['milk', 'sugar'],\n",
       " ['milk', 'milk'],\n",
       " ['milk', 'milk', 'curd', 'curd', 'milk', 'milk'],\n",
       " ['apples', 'apples', 'sugar', 'curd', 'curd'],\n",
       " ['sugar', 'apples', 'chocolate'],\n",
       " ['apples', 'chocolate', 'sugar', 'milk', 'milk', 'milk'],\n",
       " ['curd', 'milk', 'chocolate'],\n",
       " ['chocolate', 'milk'],\n",
       " ['curd', 'sugar', 'milk'],\n",
       " ['apples', 'curd', 'milk', 'sugar', 'curd'],\n",
       " ['milk', 'apples', 'chocolate'],\n",
       " ['apples'],\n",
       " ['sugar', 'chocolate', 'sugar'],\n",
       " ['curd', 'chocolate', 'apples'],\n",
       " ['sugar', 'sugar', 'milk'],\n",
       " ['sugar', 'milk', 'sugar', 'curd', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'curd', 'chocolate'],\n",
       " ['sugar', 'apples', 'sugar', 'curd'],\n",
       " ['apples', 'apples', 'apples', 'chocolate'],\n",
       " ['apples', 'chocolate', 'milk', 'curd'],\n",
       " ['sugar', 'milk', 'chocolate'],\n",
       " ['chocolate', 'curd'],\n",
       " ['apples', 'apples', 'curd'],\n",
       " ['chocolate', 'chocolate', 'milk'],\n",
       " ['curd', 'apples', 'sugar'],\n",
       " ['curd', 'sugar', 'apples', 'sugar', 'apples'],\n",
       " ['sugar', 'apples'],\n",
       " ['apples', 'milk', 'curd'],\n",
       " ['milk', 'curd'],\n",
       " ['chocolate'],\n",
       " ['apples', 'apples', 'apples', 'milk'],\n",
       " ['milk', 'apples'],\n",
       " ['chocolate', 'curd', 'chocolate', 'sugar', 'sugar'],\n",
       " ['milk', 'apples', 'curd', 'chocolate'],\n",
       " ['milk', 'milk', 'apples'],\n",
       " ['apples', 'curd', 'apples', 'apples', 'apples'],\n",
       " ['curd', 'curd', 'milk', 'apples', 'apples', 'curd'],\n",
       " ['sugar', 'sugar', 'apples', 'sugar', 'apples', 'milk', 'curd'],\n",
       " ['sugar', 'curd', 'sugar', 'sugar', 'apples'],\n",
       " ['milk', 'curd', 'chocolate'],\n",
       " ['apples', 'sugar'],\n",
       " ['sugar', 'curd', 'chocolate'],\n",
       " ['curd', 'sugar', 'curd'],\n",
       " ['sugar', 'milk', 'milk', 'sugar'],\n",
       " ['apples', 'milk', 'apples'],\n",
       " ['chocolate'],\n",
       " ['chocolate', 'apples', 'chocolate'],\n",
       " ['sugar', 'curd'],\n",
       " ['milk', 'sugar'],\n",
       " ['apples', 'chocolate', 'curd'],\n",
       " ['sugar', 'milk'],\n",
       " ['apples', 'sugar'],\n",
       " ['sugar', 'curd', 'apples'],\n",
       " ['apples', 'chocolate', 'sugar'],\n",
       " ['milk', 'milk'],\n",
       " ['milk'],\n",
       " ['curd', 'apples', 'milk'],\n",
       " ['chocolate', 'chocolate', 'sugar', 'milk', 'chocolate'],\n",
       " ['apples', 'apples', 'milk'],\n",
       " ['sugar', 'chocolate', 'curd', 'sugar', 'milk'],\n",
       " ['curd', 'sugar', 'curd', 'sugar', 'milk'],\n",
       " ['apples', 'sugar', 'milk'],\n",
       " ['sugar'],\n",
       " ['chocolate', 'milk', 'sugar'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['sugar', 'apples', 'chocolate', 'milk'],\n",
       " ['milk', 'curd', 'curd'],\n",
       " ['milk', 'apples', 'sugar'],\n",
       " ['curd', 'sugar'],\n",
       " ['chocolate', 'apples', 'sugar'],\n",
       " ['chocolate', 'apples', 'curd'],\n",
       " ['apples', 'curd', 'apples'],\n",
       " ['apples', 'milk', 'curd'],\n",
       " ['milk', 'milk', 'apples', 'milk'],\n",
       " ['curd'],\n",
       " ['apples', 'curd', 'curd', 'milk', 'sugar', 'curd'],\n",
       " ['curd', 'chocolate', 'milk', 'milk', 'milk', 'curd'],\n",
       " ['chocolate', 'curd', 'sugar'],\n",
       " ['curd', 'chocolate', 'milk'],\n",
       " ['chocolate', 'apples', 'curd', 'curd', 'chocolate', 'chocolate'],\n",
       " ['chocolate', 'curd', 'curd', 'milk'],\n",
       " ['sugar', 'apples', 'curd', 'apples', 'milk'],\n",
       " ['milk', 'apples', 'sugar', 'sugar'],\n",
       " ['milk'],\n",
       " ['apples', 'milk', 'milk', 'curd'],\n",
       " ['milk', 'sugar'],\n",
       " ['sugar', 'apples', 'curd', 'sugar', 'chocolate'],\n",
       " ['milk', 'chocolate', 'milk', 'milk'],\n",
       " ['apples', 'curd', 'sugar', 'apples', 'sugar'],\n",
       " ['curd', 'milk'],\n",
       " ['chocolate', 'curd', 'apples', 'milk'],\n",
       " ['curd', 'chocolate', 'apples', 'curd'],\n",
       " ['apples', 'curd', 'sugar', 'chocolate', 'curd'],\n",
       " ['milk', 'chocolate', 'curd'],\n",
       " ['apples', 'curd'],\n",
       " ['milk'],\n",
       " ['milk', 'curd', 'milk'],\n",
       " ['apples', 'apples', 'apples'],\n",
       " ['curd'],\n",
       " ['apples', 'curd', 'sugar'],\n",
       " ['curd', 'chocolate', 'milk', 'sugar'],\n",
       " ['apples',\n",
       "  'curd',\n",
       "  'apples',\n",
       "  'curd',\n",
       "  'sugar',\n",
       "  'chocolate',\n",
       "  'chocolate',\n",
       "  'curd'],\n",
       " ['apples', 'chocolate', 'milk'],\n",
       " ['sugar', 'chocolate', 'chocolate', 'sugar', 'apples', 'sugar'],\n",
       " ['sugar', 'milk', 'sugar', 'milk'],\n",
       " ['chocolate', 'milk', 'chocolate', 'sugar', 'curd', 'milk'],\n",
       " ['chocolate', 'curd', 'apples', 'milk'],\n",
       " ['milk', 'sugar', 'milk'],\n",
       " ['milk',\n",
       "  'apples',\n",
       "  'sugar',\n",
       "  'milk',\n",
       "  'sugar',\n",
       "  'sugar',\n",
       "  'chocolate',\n",
       "  'chocolate'],\n",
       " ['curd', 'apples', 'curd', 'apples'],\n",
       " ['chocolate', 'milk', 'chocolate'],\n",
       " ['sugar', 'curd', 'sugar', 'chocolate', 'sugar'],\n",
       " ['chocolate'],\n",
       " ['curd', 'apples', 'curd', 'milk', 'sugar'],\n",
       " ['chocolate', 'apples', 'sugar', 'curd'],\n",
       " ['sugar', 'apples', 'milk', 'milk'],\n",
       " ['chocolate',\n",
       "  'chocolate',\n",
       "  'apples',\n",
       "  'sugar',\n",
       "  'apples',\n",
       "  'chocolate',\n",
       "  'apples',\n",
       "  'chocolate'],\n",
       " ['apples', 'apples', 'milk'],\n",
       " ['apples', 'apples', 'sugar'],\n",
       " ['chocolate', 'chocolate', 'chocolate'],\n",
       " ['apples', 'apples', 'chocolate', 'milk'],\n",
       " ['milk', 'milk', 'sugar', 'apples', 'apples', 'apples'],\n",
       " ['apples', 'sugar', 'curd'],\n",
       " ['sugar', 'milk', 'milk'],\n",
       " ['sugar', 'milk', 'milk', 'sugar'],\n",
       " ['apples', 'milk'],\n",
       " ['chocolate', 'curd'],\n",
       " ['milk', 'sugar', 'milk', 'sugar'],\n",
       " ['sugar', 'chocolate', 'chocolate', 'apples'],\n",
       " ['chocolate', 'milk', 'apples', 'chocolate'],\n",
       " ['chocolate', 'sugar', 'curd', 'milk', 'apples', 'chocolate', 'curd'],\n",
       " ['milk', 'curd', 'sugar'],\n",
       " ['milk', 'sugar', 'sugar'],\n",
       " ['chocolate', 'curd', 'apples'],\n",
       " ['apples', 'chocolate', 'sugar', 'milk', 'apples', 'chocolate'],\n",
       " ['apples', 'apples', 'curd'],\n",
       " ['chocolate', 'sugar', 'chocolate'],\n",
       " ['milk', 'milk', 'sugar', 'chocolate', 'apples', 'curd', 'sugar'],\n",
       " ['curd', 'sugar', 'curd', 'chocolate', 'apples', 'curd', 'milk'],\n",
       " ['milk', 'apples', 'apples'],\n",
       " ['apples', 'sugar', 'milk'],\n",
       " ['milk', 'chocolate', 'curd', 'chocolate', 'sugar'],\n",
       " ['chocolate', 'sugar', 'sugar', 'milk', 'apples'],\n",
       " ['milk', 'sugar'],\n",
       " ['milk', 'apples'],\n",
       " ['apples', 'curd', 'sugar', 'sugar'],\n",
       " ['chocolate', 'milk', 'chocolate', 'milk'],\n",
       " ['milk', 'chocolate', 'milk', 'curd', 'milk'],\n",
       " ['milk', 'milk', 'apples', 'apples', 'chocolate'],\n",
       " ['sugar', 'curd', 'milk'],\n",
       " ['milk', 'chocolate', 'milk', 'sugar'],\n",
       " ['apples', 'apples', 'milk', 'apples'],\n",
       " ['milk', 'apples', 'sugar'],\n",
       " ['milk', 'apples', 'apples', 'milk', 'milk'],\n",
       " ['chocolate', 'sugar', 'chocolate'],\n",
       " ['sugar',\n",
       "  'curd',\n",
       "  'milk',\n",
       "  'sugar',\n",
       "  'chocolate',\n",
       "  'chocolate',\n",
       "  'apples',\n",
       "  'milk'],\n",
       " ['apples', 'milk', 'milk', 'apples'],\n",
       " ['apples', 'chocolate', 'curd', 'milk', 'milk'],\n",
       " ['milk', 'milk', 'curd', 'chocolate'],\n",
       " ['apples', 'chocolate', 'curd', 'chocolate'],\n",
       " ['chocolate'],\n",
       " ['curd', 'sugar', 'milk', 'apples', 'chocolate', 'chocolate', 'chocolate'],\n",
       " ['milk', 'milk', 'apples', 'milk', 'curd', 'apples', 'curd'],\n",
       " ['milk', 'milk', 'sugar'],\n",
       " ['apples', 'milk', 'curd'],\n",
       " ['milk', 'milk'],\n",
       " ['milk', 'milk', 'chocolate', 'chocolate', 'sugar'],\n",
       " ['apples', 'apples', 'curd'],\n",
       " ['curd', 'apples', 'sugar'],\n",
       " ['milk', 'chocolate', 'sugar'],\n",
       " ['milk', 'apples', 'sugar', 'curd'],\n",
       " ['sugar'],\n",
       " ['milk', 'sugar'],\n",
       " ['apples', 'curd', 'milk'],\n",
       " ['chocolate', 'milk', 'chocolate', 'milk'],\n",
       " ['milk', 'chocolate', 'curd'],\n",
       " ['sugar', 'curd', 'milk'],\n",
       " ['apples', 'apples', 'apples', 'apples'],\n",
       " ['chocolate', 'chocolate', 'sugar', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'chocolate', 'chocolate', 'apples', 'milk'],\n",
       " ['sugar', 'chocolate', 'curd'],\n",
       " ['sugar', 'apples', 'milk'],\n",
       " ['milk', 'sugar', 'apples'],\n",
       " ['apples', 'sugar', 'curd', 'sugar'],\n",
       " ['chocolate', 'chocolate', 'chocolate', 'chocolate', 'chocolate', 'apples'],\n",
       " ['chocolate', 'apples', 'apples', 'apples', 'chocolate'],\n",
       " ['curd'],\n",
       " ['apples', 'chocolate', 'curd', 'sugar', 'milk'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['apples', 'apples', 'sugar'],\n",
       " ['sugar', 'curd', 'sugar', 'milk', 'chocolate'],\n",
       " ['milk', 'milk'],\n",
       " ['sugar', 'chocolate', 'curd', 'sugar'],\n",
       " ['milk', 'milk'],\n",
       " ['milk', 'chocolate', 'milk', 'apples'],\n",
       " ['sugar', 'milk'],\n",
       " ['chocolate', 'apples', 'chocolate'],\n",
       " ['chocolate', 'chocolate', 'curd'],\n",
       " ['apples', 'curd', 'sugar'],\n",
       " ['curd', 'milk', 'sugar'],\n",
       " ['milk', 'milk'],\n",
       " ['sugar', 'apples', 'milk', 'curd'],\n",
       " ['milk', 'milk', 'apples', 'sugar'],\n",
       " ['curd', 'apples', 'apples', 'curd'],\n",
       " ['curd', 'apples'],\n",
       " ['apples', 'chocolate', 'apples', 'chocolate'],\n",
       " ['curd', 'chocolate', 'chocolate'],\n",
       " ['chocolate', 'sugar', 'curd'],\n",
       " ['milk', 'sugar', 'apples', 'curd', 'milk'],\n",
       " ['milk', 'curd', 'milk', 'curd'],\n",
       " ['chocolate',\n",
       "  'chocolate',\n",
       "  'apples',\n",
       "  'chocolate',\n",
       "  'sugar',\n",
       "  'apples',\n",
       "  'chocolate',\n",
       "  'chocolate'],\n",
       " ['chocolate', 'milk', 'sugar', 'chocolate'],\n",
       " ['chocolate', 'apples', 'milk', 'sugar', 'apples', 'milk'],\n",
       " ['apples', 'chocolate', 'apples'],\n",
       " ['chocolate', 'sugar', 'curd', 'curd'],\n",
       " ['apples', 'apples', 'sugar'],\n",
       " ['sugar', 'chocolate', 'apples'],\n",
       " ['curd', 'apples', 'curd', 'apples', 'milk'],\n",
       " ['apples', 'chocolate', 'milk', 'curd', 'chocolate'],\n",
       " ['apples', 'apples', 'milk', 'sugar', 'chocolate', 'sugar'],\n",
       " ['sugar', 'chocolate', 'milk', 'chocolate', 'milk'],\n",
       " ['milk', 'milk', 'apples'],\n",
       " ['milk', 'chocolate'],\n",
       " ['milk', 'milk', 'curd', 'chocolate'],\n",
       " ['chocolate', 'sugar', 'milk'],\n",
       " ['milk', 'sugar', 'apples', 'curd'],\n",
       " ['curd', 'sugar', 'chocolate', 'chocolate'],\n",
       " ['curd', 'curd', 'milk'],\n",
       " ['milk', 'chocolate'],\n",
       " ['sugar', 'milk'],\n",
       " ['milk', 'chocolate', 'chocolate', 'apples'],\n",
       " ['chocolate', 'apples', 'chocolate', 'curd', 'apples', 'curd'],\n",
       " ['sugar', 'sugar', 'sugar'],\n",
       " ['curd', 'curd'],\n",
       " ['sugar', 'milk'],\n",
       " ['curd', 'apples', 'curd', 'chocolate'],\n",
       " ['sugar', 'sugar', 'milk', 'milk', 'milk', 'chocolate', 'apples'],\n",
       " ['milk', 'milk', 'curd', 'curd', 'milk'],\n",
       " ['milk', 'milk'],\n",
       " ['curd', 'sugar', 'curd', 'apples', 'curd'],\n",
       " ['sugar', 'sugar', 'sugar', 'curd', 'curd'],\n",
       " ['chocolate', 'curd', 'apples'],\n",
       " ['apples', 'apples', 'sugar'],\n",
       " ['chocolate', 'milk'],\n",
       " ['sugar', 'sugar', 'milk', 'milk'],\n",
       " ['milk', 'sugar', 'sugar'],\n",
       " ['curd', 'apples', 'sugar', 'sugar'],\n",
       " ['sugar', 'sugar', 'apples', 'chocolate', 'curd'],\n",
       " ['milk', 'chocolate', 'apples'],\n",
       " ['chocolate'],\n",
       " ['apples', 'curd'],\n",
       " ['apples', 'apples', 'curd'],\n",
       " ['sugar', 'milk', 'sugar', 'milk'],\n",
       " ['sugar', 'apples', 'curd', 'milk'],\n",
       " ['apples', 'sugar', 'apples'],\n",
       " ['chocolate', 'sugar', 'sugar', 'chocolate', 'apples', 'curd'],\n",
       " ['sugar', 'chocolate', 'milk', 'sugar', 'sugar'],\n",
       " ['apples', 'milk', 'chocolate', 'apples'],\n",
       " ['milk'],\n",
       " ['milk', 'apples', 'apples'],\n",
       " ['curd', 'sugar'],\n",
       " ['curd', 'curd', 'chocolate'],\n",
       " ['sugar', 'sugar', 'curd', 'curd', 'milk'],\n",
       " ['curd', 'milk', 'milk', 'milk'],\n",
       " ['milk', 'milk', 'apples', 'apples'],\n",
       " ['milk', 'apples'],\n",
       " ['chocolate', 'milk', 'sugar', 'sugar'],\n",
       " ['curd', 'curd', 'chocolate'],\n",
       " ['apples', 'curd', 'apples'],\n",
       " ['sugar', 'chocolate', 'sugar'],\n",
       " ['milk', 'curd', 'apples', 'apples'],\n",
       " ['milk', 'chocolate', 'milk', 'chocolate'],\n",
       " ['curd', 'sugar', 'chocolate', 'chocolate'],\n",
       " ['apples', 'sugar', 'chocolate', 'chocolate'],\n",
       " ['curd', 'apples', 'sugar', 'apples', 'chocolate', 'milk'],\n",
       " ['curd', 'chocolate', 'milk', 'sugar'],\n",
       " ['curd', 'apples', 'apples', 'apples'],\n",
       " ['chocolate', 'milk', 'apples', 'chocolate', 'milk', 'sugar', 'apples'],\n",
       " ['chocolate', 'chocolate', 'curd', 'sugar', 'chocolate', 'curd', 'milk'],\n",
       " ['apples', 'apples', 'sugar', 'chocolate', 'curd'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['milk', 'milk', 'curd', 'chocolate'],\n",
       " ['milk', 'chocolate'],\n",
       " ['curd', 'sugar', 'curd'],\n",
       " ['sugar', 'milk', 'milk'],\n",
       " ['apples', 'curd', 'curd', 'apples'],\n",
       " ['milk', 'chocolate', 'sugar'],\n",
       " ['chocolate'],\n",
       " ['apples', 'apples', 'milk'],\n",
       " ['apples', 'apples', 'milk'],\n",
       " ['sugar',\n",
       "  'sugar',\n",
       "  'chocolate',\n",
       "  'sugar',\n",
       "  'milk',\n",
       "  'apples',\n",
       "  'chocolate',\n",
       "  'apples'],\n",
       " ['apples', 'sugar', 'apples', 'milk', 'curd'],\n",
       " ['sugar', 'apples', 'milk'],\n",
       " ['apples', 'chocolate', 'sugar', 'chocolate'],\n",
       " ['curd', 'apples', 'milk'],\n",
       " ['curd', 'sugar'],\n",
       " ['curd', 'apples', 'chocolate', 'milk', 'milk'],\n",
       " ['chocolate', 'sugar', 'chocolate'],\n",
       " ['apples', 'apples', 'milk', 'milk', 'sugar', 'chocolate'],\n",
       " ['sugar', 'apples', 'apples', 'chocolate', 'apples'],\n",
       " ['sugar', 'apples', 'apples'],\n",
       " ['milk', 'chocolate', 'chocolate'],\n",
       " ['chocolate', 'curd', 'milk', 'sugar', 'apples', 'chocolate', 'chocolate'],\n",
       " ['apples', 'curd', 'apples', 'chocolate', 'milk'],\n",
       " ['milk', 'chocolate', 'apples'],\n",
       " ['chocolate', 'sugar', 'curd'],\n",
       " ['curd', 'sugar', 'sugar'],\n",
       " ['sugar', 'curd', 'sugar', 'curd'],\n",
       " ['chocolate', 'sugar'],\n",
       " ['curd', 'milk', 'curd', 'apples'],\n",
       " ['apples', 'sugar', 'curd', 'apples', 'curd', 'curd', 'curd', 'chocolate'],\n",
       " ['milk', 'chocolate', 'apples', 'sugar', 'apples'],\n",
       " ['sugar', 'apples'],\n",
       " ['sugar', 'curd', 'sugar'],\n",
       " ['sugar', 'sugar', 'milk'],\n",
       " ['apples', 'milk', 'milk', 'sugar'],\n",
       " ['sugar', 'sugar', 'chocolate', 'curd', 'sugar', 'sugar', 'chocolate'],\n",
       " ['sugar', 'milk'],\n",
       " ['apples', 'curd', 'milk'],\n",
       " ['sugar', 'apples'],\n",
       " ['chocolate', 'sugar'],\n",
       " ['apples', 'sugar', 'apples'],\n",
       " ['sugar', 'apples', 'sugar'],\n",
       " ['milk', 'apples', 'milk', 'apples'],\n",
       " ['curd', 'apples', 'curd', 'apples', 'curd'],\n",
       " ['chocolate', 'sugar', 'chocolate'],\n",
       " ['curd', 'milk', 'chocolate', 'apples', 'apples'],\n",
       " ['chocolate', 'curd'],\n",
       " ['apples', 'milk', 'milk', 'sugar'],\n",
       " ['chocolate', 'milk', 'chocolate'],\n",
       " ['apples',\n",
       "  'curd',\n",
       "  'apples',\n",
       "  'chocolate',\n",
       "  'chocolate',\n",
       "  'apples',\n",
       "  'apples',\n",
       "  'chocolate'],\n",
       " ['sugar', 'apples', 'milk', 'curd', 'curd', 'curd'],\n",
       " ['apples', 'curd', 'chocolate', 'sugar'],\n",
       " ['curd', 'chocolate', 'chocolate', 'milk', 'milk', 'milk'],\n",
       " ['chocolate', 'apples', 'chocolate', 'milk'],\n",
       " ['chocolate', 'curd', 'sugar', 'sugar', 'apples'],\n",
       " ['sugar', 'sugar', 'sugar'],\n",
       " ['apples', 'apples', 'chocolate'],\n",
       " ['chocolate', 'chocolate', 'sugar', 'curd'],\n",
       " ['curd', 'curd', 'curd', 'apples'],\n",
       " ['curd'],\n",
       " ['sugar'],\n",
       " ['milk', 'curd', 'chocolate'],\n",
       " ['milk', 'curd', 'sugar', 'sugar'],\n",
       " ['apples', 'sugar', 'chocolate', 'curd', 'milk', 'milk'],\n",
       " ['milk', 'apples', 'sugar', 'curd'],\n",
       " ['sugar', 'sugar', 'sugar', 'milk'],\n",
       " ['apples', 'sugar', 'apples', 'curd', 'apples', 'chocolate'],\n",
       " ['sugar', 'apples', 'curd'],\n",
       " ['curd', 'curd', 'curd'],\n",
       " ['chocolate', 'milk', 'curd'],\n",
       " ['sugar', 'sugar', 'curd', 'curd', 'curd', 'sugar'],\n",
       " ['milk', 'chocolate', 'chocolate'],\n",
       " ['apples', 'chocolate', 'apples'],\n",
       " ['chocolate', 'sugar', 'apples'],\n",
       " ['curd', 'chocolate'],\n",
       " ['sugar', 'milk', 'apples'],\n",
       " ['milk', 'milk'],\n",
       " ['chocolate', 'sugar', 'milk'],\n",
       " ['chocolate', 'milk', 'curd'],\n",
       " ['sugar', 'apples'],\n",
       " ['apples', 'apples', 'apples'],\n",
       " ['sugar', 'curd', 'sugar'],\n",
       " ['apples', 'curd', 'milk'],\n",
       " ['milk', 'sugar'],\n",
       " ['milk', 'milk', 'apples', 'apples', 'milk', 'curd'],\n",
       " ['chocolate', 'milk', 'sugar', 'chocolate', 'curd'],\n",
       " ['apples', 'apples', 'sugar'],\n",
       " ['chocolate', 'apples', 'apples', 'apples'],\n",
       " ['sugar', 'sugar', 'curd'],\n",
       " ['apples', 'sugar', 'apples', 'milk', 'sugar'],\n",
       " ['chocolate', 'apples'],\n",
       " ['chocolate', 'chocolate', 'sugar'],\n",
       " ['chocolate', 'milk', 'curd', 'apples', 'curd'],\n",
       " ['curd', 'chocolate', 'chocolate', 'sugar'],\n",
       " ['sugar', 'chocolate', 'chocolate'],\n",
       " ['curd', 'milk', 'curd'],\n",
       " ['sugar', 'apples', 'sugar'],\n",
       " ['apples'],\n",
       " ['curd', 'chocolate', 'milk'],\n",
       " ['chocolate', 'chocolate', 'sugar'],\n",
       " ['sugar', 'sugar', 'curd'],\n",
       " ['chocolate', 'chocolate', 'sugar', 'milk'],\n",
       " ['apples'],\n",
       " ['sugar', 'chocolate', 'sugar', 'chocolate'],\n",
       " ['curd'],\n",
       " ['sugar', 'sugar'],\n",
       " ['chocolate', 'curd', 'apples', 'chocolate', 'curd', 'curd'],\n",
       " ['curd', 'sugar', 'chocolate'],\n",
       " ['curd', 'curd', 'sugar', 'curd', 'sugar'],\n",
       " ['apples', 'sugar', 'apples', 'sugar', 'apples', 'milk', 'sugar'],\n",
       " ['chocolate'],\n",
       " ['sugar', 'curd', 'apples', 'apples', 'chocolate'],\n",
       " ['sugar', 'curd', 'apples'],\n",
       " ['chocolate', 'chocolate', 'milk'],\n",
       " ['chocolate', 'sugar', 'apples'],\n",
       " ['chocolate', 'sugar', 'chocolate'],\n",
       " ['curd', 'chocolate'],\n",
       " ['apples'],\n",
       " ['apples', 'chocolate', 'curd'],\n",
       " ['sugar', 'milk', 'chocolate'],\n",
       " ['apples', 'curd'],\n",
       " ['curd', 'apples', 'sugar', 'sugar', 'apples'],\n",
       " ['apples', 'milk'],\n",
       " ['curd', 'apples', 'sugar', 'sugar'],\n",
       " ['curd', 'milk'],\n",
       " ['milk', 'sugar', 'sugar', 'sugar', 'apples', 'sugar'],\n",
       " ['milk', 'apples', 'curd'],\n",
       " ['chocolate', 'sugar'],\n",
       " ['curd', 'apples'],\n",
       " ['milk', 'milk', 'chocolate', 'chocolate'],\n",
       " ['milk', 'milk', 'milk', 'curd', 'milk', 'sugar', 'milk', 'milk'],\n",
       " ['curd', 'apples', 'apples'],\n",
       " ['chocolate', 'apples', 'apples', 'chocolate', 'sugar'],\n",
       " ['milk', 'apples', 'milk'],\n",
       " ['sugar'],\n",
       " ['curd', 'sugar', 'sugar'],\n",
       " ['apples', 'apples', 'curd'],\n",
       " ['curd', 'curd', 'apples'],\n",
       " ['curd', 'curd', 'chocolate'],\n",
       " ['apples', 'apples', 'curd', 'apples', 'sugar'],\n",
       " ['chocolate', 'sugar'],\n",
       " ['chocolate', 'apples'],\n",
       " ['curd', 'milk', 'chocolate'],\n",
       " ['chocolate'],\n",
       " ['milk', 'apples', 'apples', 'apples', 'curd'],\n",
       " ['curd'],\n",
       " ['sugar', 'milk', 'apples'],\n",
       " ['apples', 'curd'],\n",
       " ['chocolate'],\n",
       " ['apples', 'milk', 'curd', 'milk', 'sugar', 'chocolate'],\n",
       " ['curd', 'curd', 'chocolate', 'chocolate'],\n",
       " ['apples', 'curd', 'sugar', 'chocolate', 'chocolate', 'chocolate'],\n",
       " ['curd', 'apples', 'apples', 'curd'],\n",
       " ['chocolate', 'curd', 'sugar', 'apples', 'apples'],\n",
       " ['milk', 'chocolate', 'apples'],\n",
       " ['apples', 'chocolate'],\n",
       " ['chocolate', 'apples'],\n",
       " ['curd', 'curd', 'curd', 'sugar'],\n",
       " ['sugar', 'apples', 'sugar'],\n",
       " ['sugar', 'chocolate', 'sugar', 'milk'],\n",
       " ['chocolate', 'chocolate', 'milk'],\n",
       " ['sugar', 'sugar', 'sugar', 'sugar', 'apples'],\n",
       " ['sugar', 'apples', 'milk'],\n",
       " ['milk', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'chocolate', 'curd'],\n",
       " ['sugar'],\n",
       " ['milk', 'sugar', 'chocolate', 'curd'],\n",
       " ['milk', 'curd', 'curd'],\n",
       " ['chocolate', 'sugar', 'milk', 'milk'],\n",
       " ['sugar', 'apples', 'milk'],\n",
       " ['curd', 'milk', 'sugar'],\n",
       " ['milk', 'milk', 'milk', 'apples'],\n",
       " ['milk', 'sugar', 'sugar'],\n",
       " ['curd', 'sugar', 'apples'],\n",
       " ['milk', 'apples', 'sugar', 'sugar', 'curd', 'curd', 'chocolate', 'curd'],\n",
       " ['milk', 'apples', 'curd'],\n",
       " ['curd', 'chocolate', 'apples'],\n",
       " ['apples', 'chocolate', 'apples'],\n",
       " ['apples', 'chocolate', 'curd'],\n",
       " ['apples', 'chocolate', 'apples', 'apples', 'milk'],\n",
       " ['curd', 'milk', 'curd'],\n",
       " ['chocolate', 'curd', 'sugar', 'sugar', 'sugar'],\n",
       " ['sugar', 'milk', 'curd', 'chocolate'],\n",
       " ['milk', 'curd', 'sugar', 'apples'],\n",
       " ['milk', 'apples', 'milk', 'sugar', 'curd', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'curd', 'sugar', 'milk'],\n",
       " ['chocolate', 'milk', 'sugar'],\n",
       " ['sugar', 'apples', 'sugar', 'chocolate'],\n",
       " ['sugar', 'milk', 'milk'],\n",
       " ['chocolate', 'apples'],\n",
       " ['milk', 'curd'],\n",
       " ['curd', 'milk', 'apples', 'apples'],\n",
       " ['milk', 'apples', 'curd', 'milk'],\n",
       " ['apples', 'sugar', 'sugar', 'apples', 'chocolate', 'apples'],\n",
       " ['curd', 'curd', 'sugar', 'chocolate'],\n",
       " ['apples', 'apples', 'milk'],\n",
       " ['milk', 'curd', 'sugar'],\n",
       " ['apples', 'curd'],\n",
       " ['milk'],\n",
       " ['milk', 'curd', 'curd', 'chocolate', 'chocolate'],\n",
       " ['chocolate'],\n",
       " ['apples', 'curd'],\n",
       " ['apples', 'curd'],\n",
       " ['sugar', 'curd', 'milk', 'apples', 'apples'],\n",
       " ['milk', 'milk'],\n",
       " ['sugar', 'sugar'],\n",
       " ['sugar', 'apples', 'apples', 'chocolate'],\n",
       " ['curd', 'chocolate'],\n",
       " ['sugar', 'chocolate', 'apples'],\n",
       " ['curd', 'sugar', 'curd', 'apples', 'sugar'],\n",
       " ['apples', 'chocolate', 'sugar'],\n",
       " ['apples', 'curd', 'sugar', 'milk', 'chocolate'],\n",
       " ['milk', 'apples', 'sugar', 'curd'],\n",
       " ['apples', 'chocolate', 'sugar'],\n",
       " ['chocolate', 'apples', 'curd'],\n",
       " ['curd', 'apples'],\n",
       " ['milk', 'apples', 'milk'],\n",
       " ['apples', 'milk', 'chocolate', 'chocolate'],\n",
       " ['chocolate', 'chocolate', 'chocolate'],\n",
       " ['apples', 'apples', 'apples'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['curd', 'sugar', 'chocolate', 'sugar'],\n",
       " ['apples', 'milk'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['chocolate', 'curd', 'curd', 'milk'],\n",
       " ['curd'],\n",
       " ['apples', 'chocolate', 'milk', 'apples', 'apples'],\n",
       " ['chocolate', 'curd', 'milk', 'chocolate', 'sugar'],\n",
       " ['milk', 'curd', 'sugar'],\n",
       " ['apples', 'milk', 'sugar', 'chocolate', 'milk'],\n",
       " ['milk', 'chocolate', 'curd'],\n",
       " ['sugar', 'chocolate', 'curd', 'sugar', 'apples', 'milk', 'curd'],\n",
       " ['apples', 'sugar', 'milk'],\n",
       " ['apples', 'chocolate', 'curd'],\n",
       " ['curd', 'apples', 'sugar', 'chocolate'],\n",
       " ['curd', 'apples', 'chocolate'],\n",
       " ['sugar', 'milk', 'apples', 'chocolate', 'curd', 'milk', 'curd'],\n",
       " ['curd', 'chocolate', 'curd', 'milk'],\n",
       " ['curd', 'chocolate', 'milk'],\n",
       " ['chocolate', 'apples', 'curd'],\n",
       " ['sugar', 'sugar', 'apples', 'apples', 'curd', 'chocolate', 'sugar'],\n",
       " ['milk', 'milk'],\n",
       " ['curd', 'apples', 'milk', 'apples'],\n",
       " ['sugar', 'curd', 'apples', 'apples', 'chocolate', 'sugar', 'chocolate'],\n",
       " ['apples', 'apples'],\n",
       " ['apples', 'chocolate', 'milk'],\n",
       " ['chocolate', 'sugar', 'curd', 'milk', 'chocolate'],\n",
       " ['apples', 'apples'],\n",
       " ['chocolate', 'curd', 'sugar', 'milk', 'apples'],\n",
       " ['chocolate', 'apples'],\n",
       " ['chocolate', 'apples'],\n",
       " ['curd', 'chocolate', 'sugar', 'milk', 'sugar', 'apples'],\n",
       " ['apples', 'sugar', 'curd', 'chocolate'],\n",
       " ['sugar', 'curd'],\n",
       " ['chocolate', 'apples', 'curd'],\n",
       " ['curd', 'apples', 'curd', 'curd'],\n",
       " ['sugar', 'milk', 'sugar'],\n",
       " ['curd', 'milk', 'apples'],\n",
       " ['milk', 'sugar', 'apples', 'sugar'],\n",
       " ['milk', 'milk', 'curd', 'chocolate'],\n",
       " ['chocolate', 'milk', 'chocolate', 'sugar'],\n",
       " ['curd'],\n",
       " ['sugar', 'milk', 'apples', 'milk', 'milk', 'milk'],\n",
       " ['apples', 'apples', 'apples', 'curd', 'sugar'],\n",
       " ['milk', 'chocolate', 'sugar', 'apples'],\n",
       " ['sugar', 'sugar', 'apples'],\n",
       " ['milk', 'milk', 'chocolate', 'sugar', 'apples'],\n",
       " ['chocolate', 'apples', 'milk'],\n",
       " ['curd', 'apples', 'milk', 'apples'],\n",
       " ['milk', 'milk', 'curd'],\n",
       " ['apples', 'chocolate', 'milk'],\n",
       " ['apples', 'chocolate', 'milk'],\n",
       " ['curd', 'chocolate', 'chocolate', 'milk', 'sugar'],\n",
       " ['milk', 'curd'],\n",
       " ['milk', 'chocolate', 'sugar', 'sugar'],\n",
       " ['sugar', 'curd'],\n",
       " ['milk', 'milk', 'chocolate', 'curd', 'sugar'],\n",
       " ['chocolate', 'curd', 'milk'],\n",
       " ['chocolate', 'chocolate', 'chocolate', 'chocolate'],\n",
       " ['curd', 'curd', 'milk'],\n",
       " ['milk', 'apples', 'chocolate', 'apples'],\n",
       " ['curd', 'apples'],\n",
       " ['chocolate', 'chocolate', 'chocolate'],\n",
       " ['chocolate', 'milk', 'apples', 'sugar', 'milk'],\n",
       " ['chocolate', 'chocolate', 'apples'],\n",
       " ['chocolate', 'curd', 'apples', 'apples'],\n",
       " ['milk', 'milk'],\n",
       " ['apples', 'chocolate'],\n",
       " ['sugar', 'curd', 'sugar'],\n",
       " ['milk', 'milk', 'milk'],\n",
       " ['milk', 'apples', 'apples', 'sugar', 'curd', 'apples', 'chocolate', 'milk'],\n",
       " ['curd', 'apples', 'milk'],\n",
       " ['chocolate', 'milk'],\n",
       " ['milk', 'curd', 'milk'],\n",
       " ['curd', 'sugar'],\n",
       " ['sugar', 'apples', 'milk', 'curd', 'sugar', 'sugar', 'milk', 'sugar'],\n",
       " ['apples', 'apples', 'curd'],\n",
       " ['milk', 'apples', 'sugar'],\n",
       " ['apples', 'sugar', 'milk', 'apples'],\n",
       " ['sugar', 'milk'],\n",
       " ['milk'],\n",
       " ['apples', 'curd', 'sugar'],\n",
       " ['sugar'],\n",
       " ['chocolate', 'milk', 'sugar', 'chocolate'],\n",
       " ['curd', 'apples', 'sugar', 'curd', 'curd'],\n",
       " ['milk', 'curd'],\n",
       " ['apples', 'milk', 'sugar'],\n",
       " ['apples', 'chocolate', 'apples', 'curd'],\n",
       " ['milk', 'milk', 'sugar', 'curd', 'curd'],\n",
       " ['chocolate', 'chocolate', 'apples', 'chocolate'],\n",
       " ['sugar', 'chocolate', 'sugar', 'sugar'],\n",
       " ['apples', 'sugar', 'chocolate'],\n",
       " ['chocolate', 'chocolate', 'chocolate', 'chocolate'],\n",
       " ['milk', 'sugar'],\n",
       " ['milk'],\n",
       " ['milk', 'milk', 'sugar', 'curd'],\n",
       " ['sugar', 'sugar', 'curd', 'sugar'],\n",
       " ['sugar', 'chocolate', 'sugar'],\n",
       " ['sugar', 'apples', 'milk'],\n",
       " ['sugar', 'chocolate', 'curd'],\n",
       " ['chocolate'],\n",
       " ['chocolate', 'apples', 'apples'],\n",
       " ['sugar', 'milk', 'apples'],\n",
       " ['curd'],\n",
       " ['curd', 'chocolate'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['sugar', 'milk', 'milk', 'chocolate'],\n",
       " ['sugar', 'apples', 'apples', 'milk'],\n",
       " ['chocolate', 'milk'],\n",
       " ['chocolate', 'chocolate', 'sugar', 'sugar'],\n",
       " ['apples', 'sugar', 'apples', 'milk'],\n",
       " ['apples', 'milk', 'curd', 'milk'],\n",
       " ['sugar', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'apples'],\n",
       " ['apples', 'apples', 'sugar', 'milk'],\n",
       " ['sugar', 'chocolate', 'sugar', 'sugar'],\n",
       " ['sugar', 'sugar', 'milk'],\n",
       " ['apples', 'chocolate', 'apples'],\n",
       " ['sugar', 'chocolate', 'milk', 'apples', 'chocolate'],\n",
       " ['sugar', 'apples', 'sugar'],\n",
       " ['sugar', 'chocolate', 'milk', 'sugar'],\n",
       " ['milk', 'chocolate', 'chocolate', 'apples', 'apples'],\n",
       " ['curd', 'apples', 'milk', 'curd'],\n",
       " ['sugar', 'curd', 'chocolate', 'milk'],\n",
       " ['milk', 'apples', 'chocolate', 'apples', 'curd'],\n",
       " ['chocolate', 'apples', 'milk', 'apples', 'milk'],\n",
       " ['curd', 'curd', 'sugar', 'apples', 'curd'],\n",
       " ['sugar'],\n",
       " ['curd', 'curd', 'sugar'],\n",
       " ['apples', 'milk', 'chocolate', 'milk'],\n",
       " ['sugar', 'apples', 'chocolate', 'chocolate'],\n",
       " ['apples', 'apples', 'chocolate', 'milk', 'chocolate'],\n",
       " ['chocolate', 'sugar', 'chocolate'],\n",
       " ['curd',\n",
       "  'apples',\n",
       "  'milk',\n",
       "  'curd',\n",
       "  'chocolate',\n",
       "  'curd',\n",
       "  'chocolate',\n",
       "  'apples'],\n",
       " ['milk', 'sugar', 'curd', 'milk'],\n",
       " ['apples', 'milk', 'curd', 'chocolate', 'milk'],\n",
       " ['chocolate', 'curd', 'sugar'],\n",
       " ['milk', 'curd', 'chocolate'],\n",
       " ['curd', 'sugar', 'apples', 'curd'],\n",
       " ['curd', 'sugar', 'apples', 'sugar'],\n",
       " ['chocolate', 'chocolate', 'chocolate'],\n",
       " ['milk', 'chocolate', 'chocolate'],\n",
       " ['chocolate', 'apples', 'milk', 'apples'],\n",
       " ['milk', 'sugar', 'sugar'],\n",
       " ['apples', 'chocolate'],\n",
       " ['curd', 'curd', 'chocolate', 'chocolate', 'chocolate', 'milk'],\n",
       " ['curd', 'sugar', 'milk'],\n",
       " ['apples', 'apples', 'curd', 'curd'],\n",
       " ['apples', 'milk', 'curd', 'curd', 'curd', 'chocolate', 'curd'],\n",
       " ['sugar', 'chocolate', 'curd'],\n",
       " ['milk', 'milk', 'apples'],\n",
       " ['milk', 'chocolate'],\n",
       " ['chocolate', 'apples'],\n",
       " ['apples', 'chocolate'],\n",
       " ['sugar', 'sugar', 'sugar', 'apples'],\n",
       " ['chocolate'],\n",
       " ['chocolate', 'chocolate', 'milk', 'apples'],\n",
       " ['sugar', 'milk', 'sugar'],\n",
       " ['apples', 'sugar', 'apples', 'apples', 'chocolate'],\n",
       " ['apples', 'chocolate', 'curd', 'milk', 'chocolate'],\n",
       " ['milk', 'sugar', 'apples'],\n",
       " ['chocolate', 'milk', 'curd', 'milk'],\n",
       " ['curd', 'sugar', 'apples', 'apples'],\n",
       " ['chocolate', 'sugar'],\n",
       " ['curd', 'sugar', 'curd', 'apples'],\n",
       " ['milk', 'sugar'],\n",
       " ['apples', 'apples', 'chocolate'],\n",
       " ['curd', 'apples', 'curd', 'milk', 'curd'],\n",
       " ['milk', 'milk', 'curd'],\n",
       " ['chocolate', 'milk'],\n",
       " ['curd', 'sugar', 'apples', 'sugar', 'chocolate'],\n",
       " ['sugar', 'sugar', 'curd', 'milk'],\n",
       " ['apples'],\n",
       " ['milk', 'apples', 'sugar', 'sugar'],\n",
       " ['apples', 'apples', 'milk'],\n",
       " ['milk', 'curd', 'apples'],\n",
       " ['apples', 'chocolate', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'apples', 'sugar', 'chocolate', 'apples'],\n",
       " ['chocolate'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['apples', 'sugar', 'curd', 'apples', 'curd'],\n",
       " ['curd', 'chocolate', 'curd'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['chocolate', 'apples', 'milk', 'sugar', 'chocolate'],\n",
       " ['curd', 'apples', 'sugar'],\n",
       " ['milk', 'sugar', 'milk'],\n",
       " ['milk', 'apples', 'apples', 'milk', 'curd'],\n",
       " ['sugar', 'apples', 'milk'],\n",
       " ['curd', 'chocolate', 'apples', 'sugar'],\n",
       " ['milk', 'curd', 'chocolate', 'curd'],\n",
       " ['apples', 'milk', 'apples', 'curd'],\n",
       " ['milk', 'chocolate', 'sugar', 'apples'],\n",
       " ['sugar', 'curd', 'apples', 'sugar'],\n",
       " ['curd', 'curd'],\n",
       " ['milk', 'milk', 'chocolate', 'sugar', 'apples', 'chocolate', 'sugar'],\n",
       " ['milk', 'curd', 'apples', 'chocolate'],\n",
       " ['milk', 'apples', 'sugar', 'apples'],\n",
       " ['curd', 'apples', 'milk'],\n",
       " ['milk', 'sugar'],\n",
       " ['chocolate', 'apples', 'milk'],\n",
       " ['apples', 'milk', 'apples'],\n",
       " ['sugar', 'curd', 'sugar', 'apples', 'curd', 'apples', 'milk', 'apples'],\n",
       " ['sugar', 'sugar', 'milk', 'apples'],\n",
       " ['curd', 'chocolate'],\n",
       " ['apples', 'apples'],\n",
       " ['curd', 'milk', 'chocolate', 'chocolate'],\n",
       " ['curd', 'apples', 'chocolate', 'milk'],\n",
       " ['sugar', 'milk', 'sugar'],\n",
       " ['sugar', 'apples', 'sugar', 'sugar'],\n",
       " ['apples', 'chocolate', 'apples', 'milk'],\n",
       " ['curd', 'apples', 'curd'],\n",
       " ['curd', 'milk', 'curd'],\n",
       " ['sugar', 'apples', 'curd', 'apples', 'sugar'],\n",
       " ['sugar', 'milk', 'apples'],\n",
       " ['chocolate', 'milk'],\n",
       " ['chocolate', 'curd'],\n",
       " ['curd', 'curd', 'milk'],\n",
       " ['curd', 'chocolate'],\n",
       " ['curd', 'milk'],\n",
       " ['milk', 'apples', 'milk'],\n",
       " ['milk', 'apples'],\n",
       " ['milk', 'apples', 'sugar', 'curd', 'milk'],\n",
       " ['curd', 'apples', 'milk'],\n",
       " ['apples',\n",
       "  'chocolate',\n",
       "  'chocolate',\n",
       "  'sugar',\n",
       "  'milk',\n",
       "  'sugar',\n",
       "  'milk',\n",
       "  'sugar'],\n",
       " ['sugar', 'curd', 'sugar'],\n",
       " ['curd', 'sugar'],\n",
       " ['milk', 'curd'],\n",
       " ['milk', 'milk', 'chocolate'],\n",
       " ['milk'],\n",
       " ['milk', 'apples'],\n",
       " ['milk', 'sugar', 'sugar'],\n",
       " ['curd', 'chocolate', 'sugar', 'curd', 'curd'],\n",
       " ['curd', 'chocolate', 'curd', 'apples', 'apples'],\n",
       " ['milk', 'apples', 'apples'],\n",
       " ['chocolate', 'apples', 'sugar', 'sugar', 'chocolate'],\n",
       " ['apples', 'curd'],\n",
       " ['apples', 'milk', 'apples'],\n",
       " ['milk', 'chocolate', 'apples'],\n",
       " ['apples', 'milk', 'curd', 'sugar', 'apples', 'curd'],\n",
       " ['apples', 'milk', 'curd'],\n",
       " ['apples'],\n",
       " ['milk', 'curd'],\n",
       " ['curd', 'milk', 'apples'],\n",
       " ['chocolate', 'chocolate', 'sugar'],\n",
       " ['chocolate', 'curd'],\n",
       " ['apples', 'apples'],\n",
       " ['chocolate', 'chocolate', 'curd', 'sugar', 'sugar'],\n",
       " ['apples', 'apples', 'apples'],\n",
       " ['curd', 'milk', 'curd'],\n",
       " ['sugar'],\n",
       " ['milk', 'apples', 'milk'],\n",
       " ['chocolate', 'apples', 'apples'],\n",
       " ['milk'],\n",
       " ['apples', 'chocolate', 'apples', 'milk', 'apples'],\n",
       " ['apples', 'sugar', 'curd'],\n",
       " ['milk', 'curd', 'apples'],\n",
       " ['sugar', 'curd', 'chocolate'],\n",
       " ['chocolate', 'sugar', 'chocolate', 'apples'],\n",
       " ['sugar', 'chocolate', 'sugar', 'apples'],\n",
       " ['sugar', 'chocolate', 'apples', 'sugar'],\n",
       " ['apples', 'chocolate', 'curd'],\n",
       " ['apples', 'curd'],\n",
       " ['milk', 'chocolate', 'milk', 'chocolate'],\n",
       " ['curd', 'apples'],\n",
       " ['sugar', 'apples', 'apples', 'milk'],\n",
       " ['milk', 'chocolate', 'apples'],\n",
       " ['milk', 'milk', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'sugar', 'milk'],\n",
       " ['curd'],\n",
       " ['apples', 'apples'],\n",
       " ['apples', 'sugar', 'apples'],\n",
       " ['curd', 'apples', 'sugar', 'curd', 'chocolate', 'curd'],\n",
       " ['apples', 'apples', 'milk'],\n",
       " ['milk', 'curd', 'curd'],\n",
       " ['milk', 'sugar', 'sugar', 'chocolate'],\n",
       " ['sugar', 'sugar', 'sugar', 'curd', 'apples', 'milk', 'chocolate'],\n",
       " ['chocolate', 'chocolate', 'chocolate', 'apples'],\n",
       " ['apples', 'apples', 'milk', 'sugar', 'milk'],\n",
       " ['milk', 'curd'],\n",
       " ['sugar', 'milk', 'curd', 'sugar'],\n",
       " ['apples', 'curd', 'curd', 'apples', 'chocolate'],\n",
       " ['apples', 'chocolate', 'sugar', 'apples', 'chocolate'],\n",
       " ['apples', 'apples', 'milk', 'sugar', 'apples'],\n",
       " ['curd', 'chocolate', 'chocolate', 'milk', 'sugar'],\n",
       " ['apples', 'chocolate', 'curd', 'curd', 'milk', 'milk', 'sugar'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['apples'],\n",
       " ['apples', 'chocolate', 'curd', 'milk', 'milk'],\n",
       " ['apples', 'curd', 'curd', 'apples', 'curd'],\n",
       " ['sugar', 'sugar', 'sugar', 'sugar'],\n",
       " ['chocolate', 'apples', 'apples'],\n",
       " ['sugar', 'sugar', 'chocolate', 'curd', 'sugar'],\n",
       " ['apples'],\n",
       " ['milk', 'chocolate', 'sugar', 'sugar', 'milk', 'sugar', 'milk'],\n",
       " ['apples', 'apples', 'curd'],\n",
       " ['milk', 'milk', 'chocolate'],\n",
       " ['milk', 'chocolate'],\n",
       " ['curd', 'milk', 'milk', 'chocolate', 'apples'],\n",
       " ['curd', 'milk'],\n",
       " ['chocolate', 'apples', 'milk', 'curd', 'sugar', 'milk'],\n",
       " ['apples', 'apples', 'chocolate'],\n",
       " ['curd', 'chocolate', 'apples', 'apples', 'sugar'],\n",
       " ['curd', 'milk', 'milk'],\n",
       " ['apples', 'apples', 'chocolate', 'apples'],\n",
       " ['sugar', 'curd', 'curd', 'sugar', 'milk'],\n",
       " ['curd', 'chocolate'],\n",
       " ['curd', 'chocolate', 'sugar'],\n",
       " ['sugar', 'sugar', 'curd', 'chocolate'],\n",
       " ['curd', 'chocolate', 'milk'],\n",
       " ['apples', 'curd', 'curd', 'apples', 'curd'],\n",
       " ['chocolate', 'sugar', 'apples'],\n",
       " ['curd', 'milk'],\n",
       " ['sugar', 'apples', 'chocolate', 'apples'],\n",
       " ['milk', 'curd', 'curd', 'apples', 'chocolate', 'sugar', 'curd'],\n",
       " ['sugar', 'milk'],\n",
       " ['chocolate', 'curd'],\n",
       " ['apples', 'chocolate', 'chocolate'],\n",
       " ['curd', 'sugar', 'milk', 'chocolate', 'curd', 'apples'],\n",
       " ['apples', 'curd', 'chocolate'],\n",
       " ['curd', 'chocolate'],\n",
       " ['sugar', 'milk'],\n",
       " ['apples', 'milk'],\n",
       " ['milk', 'curd', 'curd'],\n",
       " ['sugar', 'sugar', 'chocolate'],\n",
       " ['apples', 'chocolate', 'chocolate', 'apples'],\n",
       " ['chocolate', 'chocolate', 'sugar', 'chocolate'],\n",
       " ['apples', 'curd', 'milk', 'chocolate', 'milk'],\n",
       " ['curd', 'curd', 'milk'],\n",
       " ['chocolate', 'chocolate', 'curd', 'chocolate', 'chocolate', 'milk'],\n",
       " ['milk', 'curd', 'curd', 'curd', 'apples'],\n",
       " ['sugar', 'apples'],\n",
       " ['curd', 'chocolate', 'milk'],\n",
       " ['curd', 'chocolate', 'sugar', 'sugar', 'milk', 'curd', 'milk'],\n",
       " ['milk', 'sugar', 'milk'],\n",
       " ['sugar', 'sugar', 'milk'],\n",
       " ['milk', 'sugar'],\n",
       " ['chocolate', 'chocolate', 'milk', 'milk'],\n",
       " ['chocolate', 'sugar', 'milk', 'chocolate', 'sugar', 'apples'],\n",
       " ['milk', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'sugar', 'apples'],\n",
       " ['curd', 'sugar', 'chocolate'],\n",
       " ['curd'],\n",
       " ['sugar', 'milk', 'sugar', 'apples', 'sugar'],\n",
       " ['apples', 'milk', 'apples', 'chocolate'],\n",
       " ['curd', 'curd', 'sugar', 'chocolate', 'sugar'],\n",
       " ['apples', 'chocolate', 'sugar', 'curd', 'chocolate'],\n",
       " ['milk', 'chocolate'],\n",
       " ['chocolate', 'apples', 'milk', 'chocolate'],\n",
       " ['milk', 'chocolate'],\n",
       " ['sugar', 'sugar', 'curd', 'chocolate'],\n",
       " ['chocolate', 'milk', 'curd'],\n",
       " ['sugar', 'chocolate', 'milk'],\n",
       " ['curd', 'chocolate', 'curd'],\n",
       " ['apples', 'chocolate', 'apples', 'apples'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['apples', 'apples'],\n",
       " ['chocolate', 'sugar'],\n",
       " ['chocolate', 'chocolate', 'curd'],\n",
       " ['chocolate', 'apples', 'apples', 'milk'],\n",
       " ['curd', 'apples', 'chocolate', 'sugar'],\n",
       " ['sugar', 'chocolate', 'curd', 'chocolate'],\n",
       " ['curd'],\n",
       " ['chocolate', 'curd', 'curd', 'apples', 'milk', 'apples', 'curd'],\n",
       " ['milk', 'milk', 'sugar', 'milk'],\n",
       " ['curd', 'curd', 'milk', 'curd'],\n",
       " ['milk', 'apples', 'milk', 'apples', 'curd'],\n",
       " ['milk', 'milk'],\n",
       " ['apples', 'sugar', 'sugar', 'curd'],\n",
       " ['apples', 'curd', 'curd', 'milk', 'curd'],\n",
       " ['apples', 'curd', 'apples'],\n",
       " ['curd', 'sugar', 'apples', 'curd', 'apples'],\n",
       " ['chocolate', 'milk', 'sugar'],\n",
       " ['curd', 'chocolate', 'sugar', 'apples', 'milk'],\n",
       " ['sugar', 'milk', 'apples'],\n",
       " ['sugar'],\n",
       " ['milk', 'chocolate', 'apples', 'milk'],\n",
       " ['milk', 'sugar', 'curd', 'chocolate', 'curd', 'sugar', 'chocolate'],\n",
       " ['milk', 'chocolate', 'sugar', 'curd'],\n",
       " ['curd', 'chocolate', 'milk'],\n",
       " ['milk', 'apples', 'milk', 'milk', 'apples'],\n",
       " ['milk', 'sugar', 'chocolate', 'chocolate', 'curd', 'chocolate', 'sugar'],\n",
       " ['curd', 'milk', 'sugar', 'chocolate'],\n",
       " ['apples', 'milk', 'curd', 'sugar', 'sugar'],\n",
       " ['sugar', 'curd', 'apples', 'sugar', 'chocolate'],\n",
       " ['apples', 'sugar', 'chocolate'],\n",
       " ['chocolate', 'apples'],\n",
       " ['apples', 'curd', 'sugar'],\n",
       " ['apples', 'apples', 'milk', 'milk', 'chocolate'],\n",
       " ['apples', 'sugar', 'apples'],\n",
       " ['apples', 'milk', 'curd', 'milk'],\n",
       " ['milk', 'sugar', 'sugar'],\n",
       " ['curd', 'curd', 'milk'],\n",
       " ['milk', 'sugar', 'milk'],\n",
       " ['chocolate', 'sugar', 'milk', 'milk'],\n",
       " ['milk', 'apples'],\n",
       " ['curd', 'curd', 'curd'],\n",
       " ['curd', 'curd', 'apples'],\n",
       " ['apples', 'chocolate', 'sugar', 'chocolate'],\n",
       " ['apples', 'curd', 'apples'],\n",
       " ['chocolate', 'chocolate', 'milk'],\n",
       " ['sugar', 'milk', 'sugar', 'chocolate'],\n",
       " ['curd', 'apples', 'chocolate', 'milk', 'curd'],\n",
       " ['sugar', 'chocolate', 'chocolate', 'chocolate', 'apples'],\n",
       " ['chocolate', 'curd', 'apples', 'sugar', 'chocolate', 'milk'],\n",
       " ['chocolate', 'milk'],\n",
       " ['apples', 'sugar'],\n",
       " ['milk', 'sugar', 'apples', 'sugar'],\n",
       " ['curd', 'chocolate', 'apples', 'milk'],\n",
       " ['apples', 'apples', 'apples', 'curd'],\n",
       " ['milk', 'chocolate', 'apples', 'sugar', 'sugar'],\n",
       " ['milk', 'sugar', 'chocolate', 'milk'],\n",
       " ['chocolate', 'milk', 'apples'],\n",
       " ['apples', 'curd'],\n",
       " ['milk', 'curd', 'milk'],\n",
       " ['curd', 'apples', 'apples', 'chocolate'],\n",
       " ['chocolate', 'sugar', 'milk', 'sugar', 'chocolate'],\n",
       " ['milk'],\n",
       " ['chocolate', 'sugar', 'curd', 'curd'],\n",
       " ['apples', 'sugar', 'chocolate'],\n",
       " ['curd', 'milk', 'milk', 'milk'],\n",
       " ['sugar', 'apples', 'curd', 'sugar', 'milk', 'curd'],\n",
       " ['chocolate', 'milk', 'chocolate'],\n",
       " ['apples', 'milk', 'milk'],\n",
       " ['curd', 'milk', 'milk'],\n",
       " ['milk', 'chocolate'],\n",
       " ['curd'],\n",
       " ['milk', 'milk'],\n",
       " ['milk', 'sugar', 'milk'],\n",
       " ['sugar', 'milk', 'apples'],\n",
       " ['chocolate', 'milk', 'sugar', 'sugar'],\n",
       " ['apples', 'curd', 'chocolate'],\n",
       " ['sugar', 'milk', 'sugar'],\n",
       " ['milk', 'curd', 'sugar'],\n",
       " ['chocolate', 'milk', 'chocolate'],\n",
       " ['apples', 'curd', 'sugar', 'apples'],\n",
       " ['apples', 'milk', 'sugar'],\n",
       " ['sugar', 'milk', 'sugar', 'apples', 'curd', 'chocolate', 'apples'],\n",
       " ['milk', 'chocolate', 'milk', 'milk', 'curd'],\n",
       " ['milk', 'apples', 'sugar', 'milk', 'curd'],\n",
       " ['curd', 'sugar', 'curd', 'milk', 'curd'],\n",
       " ['apples', 'apples', 'apples', 'curd', 'apples'],\n",
       " ['apples', 'apples', 'sugar'],\n",
       " ['sugar', 'milk', 'milk', 'apples', 'curd', 'apples'],\n",
       " ['sugar'],\n",
       " ['apples', 'chocolate', 'milk'],\n",
       " ['sugar',\n",
       "  'apples',\n",
       "  'apples',\n",
       "  'chocolate',\n",
       "  'curd',\n",
       "  'apples',\n",
       "  'chocolate',\n",
       "  'curd'],\n",
       " ['milk', 'curd', 'apples'],\n",
       " ['milk', 'milk', 'milk'],\n",
       " ['chocolate', 'sugar', 'curd', 'curd'],\n",
       " ['chocolate', 'sugar'],\n",
       " ['milk', 'chocolate', 'apples', 'milk'],\n",
       " ['curd', 'chocolate', 'milk'],\n",
       " ['curd', 'curd'],\n",
       " ['chocolate', 'chocolate', 'sugar'],\n",
       " ['sugar', 'curd', 'chocolate', 'milk', 'milk', 'curd'],\n",
       " ['curd', 'sugar'],\n",
       " ['apples', 'curd', 'chocolate', 'milk', 'apples', 'sugar'],\n",
       " ['curd'],\n",
       " ['curd', 'curd', 'curd'],\n",
       " ['milk', 'curd', 'chocolate', 'apples'],\n",
       " ['curd', 'apples', 'sugar'],\n",
       " ['chocolate', 'milk', 'curd', 'curd', 'milk', 'curd', 'apples'],\n",
       " ['curd', 'apples', 'apples', 'apples'],\n",
       " ['chocolate', 'chocolate'],\n",
       " ['milk'],\n",
       " ['apples', 'sugar', 'apples', 'milk'],\n",
       " ['sugar', 'milk', 'milk', 'chocolate'],\n",
       " ['milk', 'curd'],\n",
       " ['curd', 'milk', 'sugar', 'apples', 'chocolate', 'chocolate', 'apples'],\n",
       " ['sugar', 'milk', 'apples', 'milk', 'chocolate', 'curd', 'curd'],\n",
       " ['sugar', 'milk'],\n",
       " ['chocolate', 'milk', 'milk', 'chocolate', 'milk'],\n",
       " ['apples', 'apples'],\n",
       " ['apples', 'chocolate', 'curd', 'chocolate', 'chocolate', 'milk', 'apples'],\n",
       " ['sugar', 'curd'],\n",
       " ['apples', 'chocolate', 'chocolate'],\n",
       " ['sugar', 'apples', 'apples'],\n",
       " ['apples'],\n",
       " ['chocolate'],\n",
       " ['sugar', 'sugar', 'milk', 'sugar'],\n",
       " ['curd', 'chocolate', 'chocolate'],\n",
       " ['apples', 'milk', 'chocolate', 'apples'],\n",
       " ['sugar', 'chocolate', 'chocolate'],\n",
       " ['chocolate', 'sugar'],\n",
       " ['curd', 'curd', 'apples'],\n",
       " ['chocolate', 'sugar', 'sugar'],\n",
       " ['curd'],\n",
       " ['curd', 'curd', 'chocolate'],\n",
       " ['milk'],\n",
       " ['sugar', 'milk', 'apples'],\n",
       " ['curd', 'curd', 'apples'],\n",
       " ['chocolate', 'chocolate', 'chocolate', 'chocolate'],\n",
       " ['chocolate', 'sugar', 'chocolate', 'curd', 'chocolate', 'apples'],\n",
       " ['chocolate', 'curd', 'apples', 'sugar'],\n",
       " ['milk', 'chocolate', 'curd', 'apples', 'curd'],\n",
       " ['sugar', 'curd', 'sugar'],\n",
       " ['apples', 'chocolate', 'chocolate']]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "li"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37f453b5",
   "metadata": {},
   "source": [
    "#### Taking minimum support threshold 0.02 and minimum confidence threshold 0.05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "ae67188d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "itemsets,rules = apriori(li, min_support=0.02, min_confidence=0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "ea4e2520",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: {('apples',): 540,\n",
       "  ('sugar',): 498,\n",
       "  ('curd',): 493,\n",
       "  ('milk',): 542,\n",
       "  ('chocolate',): 506},\n",
       " 2: {('apples', 'chocolate'): 250,\n",
       "  ('apples', 'curd'): 264,\n",
       "  ('apples', 'milk'): 271,\n",
       "  ('apples', 'sugar'): 258,\n",
       "  ('chocolate', 'curd'): 231,\n",
       "  ('chocolate', 'milk'): 251,\n",
       "  ('chocolate', 'sugar'): 239,\n",
       "  ('curd', 'milk'): 240,\n",
       "  ('curd', 'sugar'): 230,\n",
       "  ('milk', 'sugar'): 254},\n",
       " 3: {('apples', 'chocolate', 'curd'): 112,\n",
       "  ('apples', 'chocolate', 'milk'): 120,\n",
       "  ('apples', 'chocolate', 'sugar'): 116,\n",
       "  ('apples', 'curd', 'milk'): 120,\n",
       "  ('apples', 'curd', 'sugar'): 122,\n",
       "  ('apples', 'milk', 'sugar'): 124,\n",
       "  ('chocolate', 'curd', 'milk'): 115,\n",
       "  ('chocolate', 'curd', 'sugar'): 115,\n",
       "  ('chocolate', 'milk', 'sugar'): 109,\n",
       "  ('curd', 'milk', 'sugar'): 98},\n",
       " 4: {('apples', 'chocolate', 'curd', 'milk'): 56,\n",
       "  ('apples', 'chocolate', 'curd', 'sugar'): 57,\n",
       "  ('apples', 'chocolate', 'milk', 'sugar'): 53,\n",
       "  ('apples', 'curd', 'milk', 'sugar'): 53,\n",
       "  ('chocolate', 'curd', 'milk', 'sugar'): 52},\n",
       " 5: {('apples', 'chocolate', 'curd', 'milk', 'sugar'): 29}}"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itemsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "0a1ed802",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{chocolate} -> {apples},\n",
       " {apples} -> {chocolate},\n",
       " {curd} -> {apples},\n",
       " {apples} -> {curd},\n",
       " {milk} -> {apples},\n",
       " {apples} -> {milk},\n",
       " {sugar} -> {apples},\n",
       " {apples} -> {sugar},\n",
       " {curd} -> {chocolate},\n",
       " {chocolate} -> {curd},\n",
       " {milk} -> {chocolate},\n",
       " {chocolate} -> {milk},\n",
       " {sugar} -> {chocolate},\n",
       " {chocolate} -> {sugar},\n",
       " {milk} -> {curd},\n",
       " {curd} -> {milk},\n",
       " {sugar} -> {curd},\n",
       " {curd} -> {sugar},\n",
       " {sugar} -> {milk},\n",
       " {milk} -> {sugar},\n",
       " {chocolate, curd} -> {apples},\n",
       " {apples, curd} -> {chocolate},\n",
       " {apples, chocolate} -> {curd},\n",
       " {curd} -> {apples, chocolate},\n",
       " {chocolate} -> {apples, curd},\n",
       " {apples} -> {chocolate, curd},\n",
       " {chocolate, milk} -> {apples},\n",
       " {apples, milk} -> {chocolate},\n",
       " {apples, chocolate} -> {milk},\n",
       " {milk} -> {apples, chocolate},\n",
       " {chocolate} -> {apples, milk},\n",
       " {apples} -> {chocolate, milk},\n",
       " {chocolate, sugar} -> {apples},\n",
       " {apples, sugar} -> {chocolate},\n",
       " {apples, chocolate} -> {sugar},\n",
       " {sugar} -> {apples, chocolate},\n",
       " {chocolate} -> {apples, sugar},\n",
       " {apples} -> {chocolate, sugar},\n",
       " {curd, milk} -> {apples},\n",
       " {apples, milk} -> {curd},\n",
       " {apples, curd} -> {milk},\n",
       " {milk} -> {apples, curd},\n",
       " {curd} -> {apples, milk},\n",
       " {apples} -> {curd, milk},\n",
       " {curd, sugar} -> {apples},\n",
       " {apples, sugar} -> {curd},\n",
       " {apples, curd} -> {sugar},\n",
       " {sugar} -> {apples, curd},\n",
       " {curd} -> {apples, sugar},\n",
       " {apples} -> {curd, sugar},\n",
       " {milk, sugar} -> {apples},\n",
       " {apples, sugar} -> {milk},\n",
       " {apples, milk} -> {sugar},\n",
       " {sugar} -> {apples, milk},\n",
       " {milk} -> {apples, sugar},\n",
       " {apples} -> {milk, sugar},\n",
       " {curd, milk} -> {chocolate},\n",
       " {chocolate, milk} -> {curd},\n",
       " {chocolate, curd} -> {milk},\n",
       " {milk} -> {chocolate, curd},\n",
       " {curd} -> {chocolate, milk},\n",
       " {chocolate} -> {curd, milk},\n",
       " {curd, sugar} -> {chocolate},\n",
       " {chocolate, sugar} -> {curd},\n",
       " {chocolate, curd} -> {sugar},\n",
       " {sugar} -> {chocolate, curd},\n",
       " {curd} -> {chocolate, sugar},\n",
       " {chocolate} -> {curd, sugar},\n",
       " {milk, sugar} -> {chocolate},\n",
       " {chocolate, sugar} -> {milk},\n",
       " {chocolate, milk} -> {sugar},\n",
       " {sugar} -> {chocolate, milk},\n",
       " {milk} -> {chocolate, sugar},\n",
       " {chocolate} -> {milk, sugar},\n",
       " {milk, sugar} -> {curd},\n",
       " {curd, sugar} -> {milk},\n",
       " {curd, milk} -> {sugar},\n",
       " {sugar} -> {curd, milk},\n",
       " {milk} -> {curd, sugar},\n",
       " {curd} -> {milk, sugar},\n",
       " {chocolate, curd, milk} -> {apples},\n",
       " {apples, curd, milk} -> {chocolate},\n",
       " {apples, chocolate, milk} -> {curd},\n",
       " {apples, chocolate, curd} -> {milk},\n",
       " {curd, milk} -> {apples, chocolate},\n",
       " {chocolate, milk} -> {apples, curd},\n",
       " {chocolate, curd} -> {apples, milk},\n",
       " {apples, milk} -> {chocolate, curd},\n",
       " {apples, curd} -> {chocolate, milk},\n",
       " {apples, chocolate} -> {curd, milk},\n",
       " {milk} -> {apples, chocolate, curd},\n",
       " {curd} -> {apples, chocolate, milk},\n",
       " {chocolate} -> {apples, curd, milk},\n",
       " {apples} -> {chocolate, curd, milk},\n",
       " {chocolate, curd, sugar} -> {apples},\n",
       " {apples, curd, sugar} -> {chocolate},\n",
       " {apples, chocolate, sugar} -> {curd},\n",
       " {apples, chocolate, curd} -> {sugar},\n",
       " {curd, sugar} -> {apples, chocolate},\n",
       " {chocolate, sugar} -> {apples, curd},\n",
       " {chocolate, curd} -> {apples, sugar},\n",
       " {apples, sugar} -> {chocolate, curd},\n",
       " {apples, curd} -> {chocolate, sugar},\n",
       " {apples, chocolate} -> {curd, sugar},\n",
       " {sugar} -> {apples, chocolate, curd},\n",
       " {curd} -> {apples, chocolate, sugar},\n",
       " {chocolate} -> {apples, curd, sugar},\n",
       " {apples} -> {chocolate, curd, sugar},\n",
       " {chocolate, milk, sugar} -> {apples},\n",
       " {apples, milk, sugar} -> {chocolate},\n",
       " {apples, chocolate, sugar} -> {milk},\n",
       " {apples, chocolate, milk} -> {sugar},\n",
       " {milk, sugar} -> {apples, chocolate},\n",
       " {chocolate, sugar} -> {apples, milk},\n",
       " {chocolate, milk} -> {apples, sugar},\n",
       " {apples, sugar} -> {chocolate, milk},\n",
       " {apples, milk} -> {chocolate, sugar},\n",
       " {apples, chocolate} -> {milk, sugar},\n",
       " {sugar} -> {apples, chocolate, milk},\n",
       " {milk} -> {apples, chocolate, sugar},\n",
       " {chocolate} -> {apples, milk, sugar},\n",
       " {apples} -> {chocolate, milk, sugar},\n",
       " {curd, milk, sugar} -> {apples},\n",
       " {apples, milk, sugar} -> {curd},\n",
       " {apples, curd, sugar} -> {milk},\n",
       " {apples, curd, milk} -> {sugar},\n",
       " {milk, sugar} -> {apples, curd},\n",
       " {curd, sugar} -> {apples, milk},\n",
       " {curd, milk} -> {apples, sugar},\n",
       " {apples, sugar} -> {curd, milk},\n",
       " {apples, milk} -> {curd, sugar},\n",
       " {apples, curd} -> {milk, sugar},\n",
       " {sugar} -> {apples, curd, milk},\n",
       " {milk} -> {apples, curd, sugar},\n",
       " {curd} -> {apples, milk, sugar},\n",
       " {apples} -> {curd, milk, sugar},\n",
       " {curd, milk, sugar} -> {chocolate},\n",
       " {chocolate, milk, sugar} -> {curd},\n",
       " {chocolate, curd, sugar} -> {milk},\n",
       " {chocolate, curd, milk} -> {sugar},\n",
       " {milk, sugar} -> {chocolate, curd},\n",
       " {curd, sugar} -> {chocolate, milk},\n",
       " {curd, milk} -> {chocolate, sugar},\n",
       " {chocolate, sugar} -> {curd, milk},\n",
       " {chocolate, milk} -> {curd, sugar},\n",
       " {chocolate, curd} -> {milk, sugar},\n",
       " {sugar} -> {chocolate, curd, milk},\n",
       " {milk} -> {chocolate, curd, sugar},\n",
       " {curd} -> {chocolate, milk, sugar},\n",
       " {chocolate} -> {curd, milk, sugar},\n",
       " {chocolate, curd, milk, sugar} -> {apples},\n",
       " {apples, curd, milk, sugar} -> {chocolate},\n",
       " {apples, chocolate, milk, sugar} -> {curd},\n",
       " {apples, chocolate, curd, sugar} -> {milk},\n",
       " {apples, chocolate, curd, milk} -> {sugar},\n",
       " {curd, milk, sugar} -> {apples, chocolate},\n",
       " {chocolate, milk, sugar} -> {apples, curd},\n",
       " {chocolate, curd, sugar} -> {apples, milk},\n",
       " {chocolate, curd, milk} -> {apples, sugar},\n",
       " {apples, milk, sugar} -> {chocolate, curd},\n",
       " {apples, curd, sugar} -> {chocolate, milk},\n",
       " {apples, curd, milk} -> {chocolate, sugar},\n",
       " {apples, chocolate, sugar} -> {curd, milk},\n",
       " {apples, chocolate, milk} -> {curd, sugar},\n",
       " {apples, chocolate, curd} -> {milk, sugar},\n",
       " {milk, sugar} -> {apples, chocolate, curd},\n",
       " {curd, sugar} -> {apples, chocolate, milk},\n",
       " {curd, milk} -> {apples, chocolate, sugar},\n",
       " {chocolate, sugar} -> {apples, curd, milk},\n",
       " {chocolate, milk} -> {apples, curd, sugar},\n",
       " {chocolate, curd} -> {apples, milk, sugar},\n",
       " {apples, sugar} -> {chocolate, curd, milk},\n",
       " {apples, milk} -> {chocolate, curd, sugar},\n",
       " {apples, curd} -> {chocolate, milk, sugar},\n",
       " {apples, chocolate} -> {curd, milk, sugar},\n",
       " {sugar} -> {apples, chocolate, curd, milk},\n",
       " {milk} -> {apples, chocolate, curd, sugar},\n",
       " {curd} -> {apples, chocolate, milk, sugar},\n",
       " {chocolate} -> {apples, curd, milk, sugar},\n",
       " {apples} -> {chocolate, curd, milk, sugar}]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23e98282",
   "metadata": {},
   "source": [
    "#### taking minimum support threadhold 0.1 and minimum confidence threshold 0.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "f788840e",
   "metadata": {},
   "outputs": [],
   "source": [
    "itemsets,rules = apriori(li, min_support=0.1, min_confidence=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "72b0b705",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: {('apples',): 540,\n",
       "  ('sugar',): 498,\n",
       "  ('curd',): 493,\n",
       "  ('milk',): 542,\n",
       "  ('chocolate',): 506},\n",
       " 2: {('apples', 'chocolate'): 250,\n",
       "  ('apples', 'curd'): 264,\n",
       "  ('apples', 'milk'): 271,\n",
       "  ('apples', 'sugar'): 258,\n",
       "  ('chocolate', 'curd'): 231,\n",
       "  ('chocolate', 'milk'): 251,\n",
       "  ('chocolate', 'sugar'): 239,\n",
       "  ('curd', 'milk'): 240,\n",
       "  ('curd', 'sugar'): 230,\n",
       "  ('milk', 'sugar'): 254},\n",
       " 3: {('apples', 'chocolate', 'curd'): 112,\n",
       "  ('apples', 'chocolate', 'milk'): 120,\n",
       "  ('apples', 'chocolate', 'sugar'): 116,\n",
       "  ('apples', 'curd', 'milk'): 120,\n",
       "  ('apples', 'curd', 'sugar'): 122,\n",
       "  ('apples', 'milk', 'sugar'): 124,\n",
       "  ('chocolate', 'curd', 'milk'): 115,\n",
       "  ('chocolate', 'curd', 'sugar'): 115,\n",
       "  ('chocolate', 'milk', 'sugar'): 109}}"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itemsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "fb7c4a68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{chocolate} -> {apples},\n",
       " {apples} -> {chocolate},\n",
       " {curd} -> {apples},\n",
       " {apples} -> {curd},\n",
       " {milk} -> {apples},\n",
       " {apples} -> {milk},\n",
       " {sugar} -> {apples},\n",
       " {apples} -> {sugar},\n",
       " {curd} -> {chocolate},\n",
       " {chocolate} -> {curd},\n",
       " {milk} -> {chocolate},\n",
       " {chocolate} -> {milk},\n",
       " {sugar} -> {chocolate},\n",
       " {chocolate} -> {sugar},\n",
       " {milk} -> {curd},\n",
       " {curd} -> {milk},\n",
       " {sugar} -> {curd},\n",
       " {curd} -> {sugar},\n",
       " {sugar} -> {milk},\n",
       " {milk} -> {sugar},\n",
       " {chocolate, curd} -> {apples},\n",
       " {apples, curd} -> {chocolate},\n",
       " {apples, chocolate} -> {curd},\n",
       " {curd} -> {apples, chocolate},\n",
       " {chocolate} -> {apples, curd},\n",
       " {apples} -> {chocolate, curd},\n",
       " {chocolate, milk} -> {apples},\n",
       " {apples, milk} -> {chocolate},\n",
       " {apples, chocolate} -> {milk},\n",
       " {milk} -> {apples, chocolate},\n",
       " {chocolate} -> {apples, milk},\n",
       " {apples} -> {chocolate, milk},\n",
       " {chocolate, sugar} -> {apples},\n",
       " {apples, sugar} -> {chocolate},\n",
       " {apples, chocolate} -> {sugar},\n",
       " {sugar} -> {apples, chocolate},\n",
       " {chocolate} -> {apples, sugar},\n",
       " {apples} -> {chocolate, sugar},\n",
       " {curd, milk} -> {apples},\n",
       " {apples, milk} -> {curd},\n",
       " {apples, curd} -> {milk},\n",
       " {milk} -> {apples, curd},\n",
       " {curd} -> {apples, milk},\n",
       " {apples} -> {curd, milk},\n",
       " {curd, sugar} -> {apples},\n",
       " {apples, sugar} -> {curd},\n",
       " {apples, curd} -> {sugar},\n",
       " {sugar} -> {apples, curd},\n",
       " {curd} -> {apples, sugar},\n",
       " {apples} -> {curd, sugar},\n",
       " {milk, sugar} -> {apples},\n",
       " {apples, sugar} -> {milk},\n",
       " {apples, milk} -> {sugar},\n",
       " {sugar} -> {apples, milk},\n",
       " {milk} -> {apples, sugar},\n",
       " {apples} -> {milk, sugar},\n",
       " {curd, milk} -> {chocolate},\n",
       " {chocolate, milk} -> {curd},\n",
       " {chocolate, curd} -> {milk},\n",
       " {milk} -> {chocolate, curd},\n",
       " {curd} -> {chocolate, milk},\n",
       " {chocolate} -> {curd, milk},\n",
       " {curd, sugar} -> {chocolate},\n",
       " {chocolate, sugar} -> {curd},\n",
       " {chocolate, curd} -> {sugar},\n",
       " {sugar} -> {chocolate, curd},\n",
       " {curd} -> {chocolate, sugar},\n",
       " {chocolate} -> {curd, sugar},\n",
       " {milk, sugar} -> {chocolate},\n",
       " {chocolate, sugar} -> {milk},\n",
       " {chocolate, milk} -> {sugar},\n",
       " {sugar} -> {chocolate, milk},\n",
       " {milk} -> {chocolate, sugar},\n",
       " {chocolate} -> {milk, sugar}]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca79f888",
   "metadata": {},
   "source": [
    "#### plotting the most frequent item"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "99fa5734",
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_food = new_df[\"Food\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "e45fda0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['apples', 'sugar', 'curd', 'milk', 'chocolate'], dtype=object)"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unique_food"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "b30a05e5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "count = {}\n",
    "\n",
    "for i in range(new_df.shape[0]):\n",
    "    if new_df[\"Food\"][i] not in count:\n",
    "        count[new_df[\"Food\"][i]] = new_df[\"Quantity\"][i]\n",
    "    else:\n",
    "        count[new_df[\"Food\"][i]] = new_df[\"Quantity\"][i] + count[new_df[\"Food\"][i]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "d1030473",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'apples': 19337,\n",
       " 'sugar': 16351,\n",
       " 'curd': 16273,\n",
       " 'milk': 16910,\n",
       " 'chocolate': 16807}"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "d2ca0c0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "count = pd.Series(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "b4737e43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Frquency')"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "count.plot(kind=\"bar\")\n",
    "plt.xlabel(\"Frequent Items\")\n",
    "plt.ylabel(\"Frquency\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
