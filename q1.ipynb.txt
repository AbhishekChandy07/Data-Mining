{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d545e875",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Violations detected:\n",
      "Rule 3 Violated at index 0: Status (-1) is not valid.\n",
      "Rule 2 Violated at index 2: Age (18) should be greater than yearsmarried (20.0).\n",
      "Rule 1 Violated at 3: Age (221) is not in the range 0-150.\n",
      "Rule 4 Violated at index 4: Agegroup (child) does not match expected age group (adult).\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "data = pd.read_csv(\"peoples.txt\")\n",
    "\n",
    "# Define ruleset E\n",
    "def ruleset_E(data):\n",
    "    one=0;\n",
    "    two=0;\n",
    "    three=0;\n",
    "    four=0;\n",
    "    violations = []\n",
    "    for index, row in data.iterrows():\n",
    "        # Rule 1: Age should be in the range 0-150\n",
    "        if not 0 <= row['Age'] <= 150:\n",
    "            one=one+1;\n",
    "            violations.append(f\"Rule 1 Violated at {index}: Age ({row['Age']}) is not in the range 0-150.\")\n",
    "        \n",
    "        # Rule 2: Age should be greater than yearsmarried\n",
    "        if row['Age'] <= row['yearsmarried']:\n",
    "            two=two+1;\n",
    "            violations.append(f\"Rule 2 Violated at index {index}: Age ({row['Age']}) should be greater than yearsmarried ({row['yearsmarried']}).\")\n",
    "        \n",
    "        # Rule 3: Status should be married, single, or widowed\n",
    "        valid_statuses = ['married', 'single', 'widowed']\n",
    "        if row['status'] not in valid_statuses:\n",
    "            three=three+1;\n",
    "            violations.append(f\"Rule 3 Violated at index {index}: Status ({row['status']}) is not valid.\")\n",
    "        \n",
    "        # Rule 4: Age group based on age\n",
    "        if row['Age'] < 18:\n",
    "            expected_agegroup = 'child'\n",
    "        elif 18 <= row['Age'] <= 65:\n",
    "            expected_agegroup = 'adult'\n",
    "        else:\n",
    "            expected_agegroup = 'elderly'\n",
    "        if row['agegroup'] != expected_agegroup:\n",
    "            four=four+1;\n",
    "            violations.append(f\"Rule 4 Violated at index {index}: Agegroup ({row['agegroup']}) does not match expected age group ({expected_agegroup}).\")\n",
    "    \n",
    "    return violations,one,two,three,four\n",
    "\n",
    "# (i) Check violations\n",
    "violations,one,two,three,four = ruleset_E(data)\n",
    "\n",
    "# (ii) Summarize results\n",
    "if violations:\n",
    "    print(\"Violations detected:\")\n",
    "    for violation in violations:\n",
    "        print(violation)\n",
    "else:\n",
    "    print(\"No violations detected.\")\n",
    "\n",
    "# (iii) Visualize results\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "violation_counts = {}\n",
    "for violation in violations:\n",
    "    rule = violation.split(':')[0]\n",
    "    violation_counts[rule] = violation_counts.get(rule, 0) + 1\n",
    "\n",
    "plt.bar(['Rule 1','Rule 2', 'Rule 3', 'Rule 4'], [one,two,three,four])\n",
    "plt.xlabel('Rule')\n",
    "plt.ylabel('Violation Count')\n",
    "plt.title('Violations Summary')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f718fa50",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
